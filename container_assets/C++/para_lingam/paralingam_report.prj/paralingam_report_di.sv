// (c) 1992-2024 Intel Corporation.                                             
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack        
// words and logos are trademarks of Intel Corporation or its                   
// subsidiaries in the U.S. and/or other countries. Other marks and             
// brands may be claimed as the property of others.                             
// See Trademarks on intel.com for full list of Intel trademarks or the         
// Trademarks & Brands Names Database (if Intel)                                
// or See www.Intel.com/legal (if Altera)                                       
// Your use of Intel Corporation's design tools, logic functions and            
// other software and tools, and its AMPP partner logic functions, and          
// any output files any of the foregoing (including device programming          
// or simulation files), and any associated documentation or information        
// are expressly subject to the terms and conditions of the Altera              
// Program License Subscription Agreement, Intel MegaCore Function              
// License Agreement, or other applicable license agreement, including,         
// without limitation, that your use is for the sole purpose of                 
// programming logic devices manufactured by Intel and sold by Intel or         
// its authorized distributors.                                                 
// Please refer to the applicable agreement for further details.                
// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 2025.0.0 Build 485db989daf205d1f3115c250809abcd4faf0211 Pro Edition, Copyright (c) 2024 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE paralingam_report_di
/////////////////////////////////////////////////////////////////
module paralingam_report_di
(
   input logic clock,
   input logic resetn,
   output logic [63:0] device_exception_bus,
   output logic [4:0] kernel_irqs,
   // AVM avm_mem_gmem0_0_port_0_0_rw
   output logic avm_mem_gmem0_0_port_0_0_rw_enable,
   output logic avm_mem_gmem0_0_port_0_0_rw_read,
   output logic avm_mem_gmem0_0_port_0_0_rw_write,
   output logic [34:0] avm_mem_gmem0_0_port_0_0_rw_address,
   output logic [63:0] avm_mem_gmem0_0_port_0_0_rw_writedata,
   output logic [7:0] avm_mem_gmem0_0_port_0_0_rw_byteenable,
   input logic avm_mem_gmem0_0_port_0_0_rw_waitrequest,
   input logic [63:0] avm_mem_gmem0_0_port_0_0_rw_readdata,
   input logic avm_mem_gmem0_0_port_0_0_rw_readdatavalid,
   output logic avm_mem_gmem0_0_port_0_0_rw_burstcount,
   input logic avm_mem_gmem0_0_port_0_0_rw_writeack,
   // AVS csr_ring_root_avs
   input logic csr_ring_root_avs_enable,
   input logic csr_ring_root_avs_read,
   input logic csr_ring_root_avs_write,
   input logic [8:0] csr_ring_root_avs_address,
   input logic [63:0] csr_ring_root_avs_writedata,
   input logic [7:0] csr_ring_root_avs_byteenable,
   output logic csr_ring_root_avs_waitrequest,
   output logic [63:0] csr_ring_root_avs_readdata,
   output logic csr_ring_root_avs_readdatavalid
);
   genvar __i;
   genvar __j;
   genvar __k;
   logic cra_ring_node_avm_wire_3_enable;
   logic cra_ring_node_avm_wire_3_read;
   logic cra_ring_node_avm_wire_3_write;
   logic [4:0] cra_ring_node_avm_wire_3_address;
   logic [63:0] cra_ring_node_avm_wire_3_writedata;
   logic [7:0] cra_ring_node_avm_wire_3_byteenable;
   logic [63:0] cra_ring_node_avm_wire_3_readdata;
   logic cra_ring_node_avm_wire_3_readdatavalid;
   logic cra_ring_node_avm_wire_3_burstcount;
   logic cra_ring_node_avm_wire_2_enable;
   logic cra_ring_node_avm_wire_2_read;
   logic cra_ring_node_avm_wire_2_write;
   logic [5:0] cra_ring_node_avm_wire_2_address;
   logic [63:0] cra_ring_node_avm_wire_2_writedata;
   logic [7:0] cra_ring_node_avm_wire_2_byteenable;
   logic [63:0] cra_ring_node_avm_wire_2_readdata;
   logic cra_ring_node_avm_wire_2_readdatavalid;
   logic cra_ring_node_avm_wire_2_burstcount;
   logic cra_ring_node_avm_wire_0_enable;
   logic cra_ring_node_avm_wire_0_read;
   logic cra_ring_node_avm_wire_0_write;
   logic [4:0] cra_ring_node_avm_wire_0_address;
   logic [63:0] cra_ring_node_avm_wire_0_writedata;
   logic [7:0] cra_ring_node_avm_wire_0_byteenable;
   logic [63:0] cra_ring_node_avm_wire_0_readdata;
   logic cra_ring_node_avm_wire_0_readdatavalid;
   logic cra_ring_node_avm_wire_0_burstcount;
   logic cra_ring_node_avm_wire_1_enable;
   logic cra_ring_node_avm_wire_1_read;
   logic cra_ring_node_avm_wire_1_write;
   logic [4:0] cra_ring_node_avm_wire_1_address;
   logic [63:0] cra_ring_node_avm_wire_1_writedata;
   logic [7:0] cra_ring_node_avm_wire_1_byteenable;
   logic [63:0] cra_ring_node_avm_wire_1_readdata;
   logic cra_ring_node_avm_wire_1_readdatavalid;
   logic cra_ring_node_avm_wire_1_burstcount;
   logic cra_ring_node_avm_wire_4_enable;
   logic cra_ring_node_avm_wire_4_read;
   logic cra_ring_node_avm_wire_4_write;
   logic [5:0] cra_ring_node_avm_wire_4_address;
   logic [63:0] cra_ring_node_avm_wire_4_writedata;
   logic [7:0] cra_ring_node_avm_wire_4_byteenable;
   logic [63:0] cra_ring_node_avm_wire_4_readdata;
   logic cra_ring_node_avm_wire_4_readdatavalid;
   logic cra_ring_node_avm_wire_4_burstcount;
   localparam [0:0][0:0][31:0] root_map_local_mem0 = '{'{0}};
   logic gmem_avm_kernel_rd_enable [11];
   logic gmem_avm_kernel_rd_read [11];
   logic gmem_avm_kernel_rd_write [11];
   logic [34:0] gmem_avm_kernel_rd_address [11];
   logic [63:0] gmem_avm_kernel_rd_writedata [11];
   logic [7:0] gmem_avm_kernel_rd_byteenable [11];
   logic gmem_avm_kernel_rd_waitrequest [11];
   logic [63:0] gmem_avm_kernel_rd_readdata [11];
   logic gmem_avm_kernel_rd_readdatavalid [11];
   logic gmem_avm_kernel_rd_burstcount [11];
   logic gmem_avm_kernel_rd_writeack [11];
   logic gmem_avm_kernel_wr_enable [8];
   logic gmem_avm_kernel_wr_read [8];
   logic gmem_avm_kernel_wr_write [8];
   logic [34:0] gmem_avm_kernel_wr_address [8];
   logic [63:0] gmem_avm_kernel_wr_writedata [8];
   logic [7:0] gmem_avm_kernel_wr_byteenable [8];
   logic gmem_avm_kernel_wr_waitrequest [8];
   logic [63:0] gmem_avm_kernel_wr_readdata [8];
   logic gmem_avm_kernel_wr_readdatavalid [8];
   logic gmem_avm_kernel_wr_burstcount [8];
   logic gmem_avm_kernel_wr_writeack [8];
   logic gmem_ic_avm_enable [1];
   logic gmem_ic_avm_read [1];
   logic gmem_ic_avm_write [1];
   logic [34:0] gmem_ic_avm_address [1];
   logic [63:0] gmem_ic_avm_writedata [1];
   logic [7:0] gmem_ic_avm_byteenable [1];
   logic gmem_ic_avm_waitrequest [1];
   logic [63:0] gmem_ic_avm_readdata [1];
   logic gmem_ic_avm_readdatavalid [1];
   logic gmem_ic_avm_burstcount [1];
   logic gmem_ic_avm_writeack [1];
   logic lmem_invalid_single_bit;
   logic [1:0] lmem_invalid_aspaces;
   logic local_avm_aspace64_enable [1][2];
   logic local_avm_aspace64_read [1][2];
   logic local_avm_aspace64_write [1][2];
   logic [31:0] local_avm_aspace64_address [1][2];
   logic [31:0] local_avm_aspace64_writedata [1][2];
   logic [3:0] local_avm_aspace64_byteenable [1][2];
   logic local_avm_aspace64_waitrequest [1][2];
   logic [31:0] local_avm_aspace64_readdata [1][2];
   logic local_avm_aspace64_readdatavalid [1][2];
   logic local_avm_aspace64_burstcount [1][2];
   logic local_avm_aspace64_writeack [1][2];
   logic local_avm_aspace65_enable [1][2];
   logic local_avm_aspace65_read [1][2];
   logic local_avm_aspace65_write [1][2];
   logic [31:0] local_avm_aspace65_address [1][2];
   logic [31:0] local_avm_aspace65_writedata [1][2];
   logic [3:0] local_avm_aspace65_byteenable [1][2];
   logic local_avm_aspace65_waitrequest [1][2];
   logic [31:0] local_avm_aspace65_readdata [1][2];
   logic local_avm_aspace65_readdatavalid [1][2];
   logic local_avm_aspace65_burstcount [1][2];
   logic local_avm_aspace65_writeack [1][2];

   // INST const_lambda_3_std_ic_inst of const_lambda_3_std_ic_partition_wrapper
   const_lambda_3_std_ic_partition_wrapper const_lambda_3_std_ic_inst
   (
      .clock(clock),
      .resetn(resetn),
      .cra_irq_const_lambda_3(kernel_irqs[0]),
      // AVS avs_const_lambda_3_cra
      .avs_const_lambda_3_cra_enable(cra_ring_node_avm_wire_3_enable),
      .avs_const_lambda_3_cra_read(cra_ring_node_avm_wire_3_read),
      .avs_const_lambda_3_cra_write(cra_ring_node_avm_wire_3_write),
      .avs_const_lambda_3_cra_address(cra_ring_node_avm_wire_3_address),
      .avs_const_lambda_3_cra_writedata(cra_ring_node_avm_wire_3_writedata),
      .avs_const_lambda_3_cra_byteenable(cra_ring_node_avm_wire_3_byteenable),
      .avs_const_lambda_3_cra_readdata(cra_ring_node_avm_wire_3_readdata),
      .avs_const_lambda_3_cra_readdatavalid(cra_ring_node_avm_wire_3_readdatavalid),
      // AVM const_lambda_3_0_avm_lm_const_lambda_3
      .const_lambda_3_0_avm_lm_const_lambda_3_enable(gmem_avm_kernel_rd_enable[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_read(gmem_avm_kernel_rd_read[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_write(gmem_avm_kernel_rd_write[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_address(gmem_avm_kernel_rd_address[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_writedata(gmem_avm_kernel_rd_writedata[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_byteenable(gmem_avm_kernel_rd_byteenable[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_waitrequest(gmem_avm_kernel_rd_waitrequest[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_readdata(gmem_avm_kernel_rd_readdata[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_readdatavalid(gmem_avm_kernel_rd_readdatavalid[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_burstcount(gmem_avm_kernel_rd_burstcount[0]),
      .const_lambda_3_0_avm_lm_const_lambda_3_writeack(gmem_avm_kernel_rd_writeack[0]),
      // AVM const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_enable(gmem_avm_kernel_wr_enable[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_read(gmem_avm_kernel_wr_read[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_write(gmem_avm_kernel_wr_write[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_address(gmem_avm_kernel_wr_address[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_writedata(gmem_avm_kernel_wr_writedata[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_byteenable(gmem_avm_kernel_wr_byteenable[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_waitrequest(gmem_avm_kernel_wr_waitrequest[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_readdata(gmem_avm_kernel_wr_readdata[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid(gmem_avm_kernel_wr_readdatavalid[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_burstcount(gmem_avm_kernel_wr_burstcount[0]),
      .const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_writeack(gmem_avm_kernel_wr_writeack[0])
   );

   // INST const_lambda_2_std_ic_inst of const_lambda_2_std_ic_partition_wrapper
   const_lambda_2_std_ic_partition_wrapper const_lambda_2_std_ic_inst
   (
      .clock(clock),
      .resetn(resetn),
      .cra_irq_const_lambda_2(kernel_irqs[1]),
      // AVS avs_const_lambda_2_cra
      .avs_const_lambda_2_cra_enable(cra_ring_node_avm_wire_2_enable),
      .avs_const_lambda_2_cra_read(cra_ring_node_avm_wire_2_read),
      .avs_const_lambda_2_cra_write(cra_ring_node_avm_wire_2_write),
      .avs_const_lambda_2_cra_address(cra_ring_node_avm_wire_2_address),
      .avs_const_lambda_2_cra_writedata(cra_ring_node_avm_wire_2_writedata),
      .avs_const_lambda_2_cra_byteenable(cra_ring_node_avm_wire_2_byteenable),
      .avs_const_lambda_2_cra_readdata(cra_ring_node_avm_wire_2_readdata),
      .avs_const_lambda_2_cra_readdatavalid(cra_ring_node_avm_wire_2_readdatavalid),
      // AVM const_lambda_2_0_avm_lm16_const_lambda_2
      .const_lambda_2_0_avm_lm16_const_lambda_2_enable(gmem_avm_kernel_rd_enable[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_read(gmem_avm_kernel_rd_read[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_write(gmem_avm_kernel_rd_write[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_address(gmem_avm_kernel_rd_address[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_writedata(gmem_avm_kernel_rd_writedata[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_byteenable(gmem_avm_kernel_rd_byteenable[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_waitrequest(gmem_avm_kernel_rd_waitrequest[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_readdata(gmem_avm_kernel_rd_readdata[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_readdatavalid(gmem_avm_kernel_rd_readdatavalid[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_burstcount(gmem_avm_kernel_rd_burstcount[1]),
      .const_lambda_2_0_avm_lm16_const_lambda_2_writeack(gmem_avm_kernel_rd_writeack[1]),
      // AVM const_lambda_2_0_avm_lm18_const_lambda_2
      .const_lambda_2_0_avm_lm18_const_lambda_2_enable(gmem_avm_kernel_rd_enable[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_read(gmem_avm_kernel_rd_read[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_write(gmem_avm_kernel_rd_write[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_address(gmem_avm_kernel_rd_address[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_writedata(gmem_avm_kernel_rd_writedata[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_byteenable(gmem_avm_kernel_rd_byteenable[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_waitrequest(gmem_avm_kernel_rd_waitrequest[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_readdata(gmem_avm_kernel_rd_readdata[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_readdatavalid(gmem_avm_kernel_rd_readdatavalid[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_burstcount(gmem_avm_kernel_rd_burstcount[2]),
      .const_lambda_2_0_avm_lm18_const_lambda_2_writeack(gmem_avm_kernel_rd_writeack[2]),
      // AVM const_lambda_2_0_avm_lm9_const_lambda_2
      .const_lambda_2_0_avm_lm9_const_lambda_2_enable(gmem_avm_kernel_rd_enable[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_read(gmem_avm_kernel_rd_read[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_write(gmem_avm_kernel_rd_write[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_address(gmem_avm_kernel_rd_address[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_writedata(gmem_avm_kernel_rd_writedata[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_byteenable(gmem_avm_kernel_rd_byteenable[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_waitrequest(gmem_avm_kernel_rd_waitrequest[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_readdata(gmem_avm_kernel_rd_readdata[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_readdatavalid(gmem_avm_kernel_rd_readdatavalid[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_burstcount(gmem_avm_kernel_rd_burstcount[3]),
      .const_lambda_2_0_avm_lm9_const_lambda_2_writeack(gmem_avm_kernel_rd_writeack[3]),
      // AVM const_lambda_2_0_avm_memdep_4_const_lambda_2
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_enable(gmem_avm_kernel_wr_enable[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_read(gmem_avm_kernel_wr_read[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_write(gmem_avm_kernel_wr_write[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_address(gmem_avm_kernel_wr_address[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_writedata(gmem_avm_kernel_wr_writedata[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_byteenable(gmem_avm_kernel_wr_byteenable[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_waitrequest(gmem_avm_kernel_wr_waitrequest[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_readdata(gmem_avm_kernel_wr_readdata[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_readdatavalid(gmem_avm_kernel_wr_readdatavalid[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_burstcount(gmem_avm_kernel_wr_burstcount[1]),
      .const_lambda_2_0_avm_memdep_4_const_lambda_2_writeack(gmem_avm_kernel_wr_writeack[1]),
      // AVM const_lambda_2_0_avm_memdep_5_const_lambda_2
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_enable(gmem_avm_kernel_wr_enable[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_read(gmem_avm_kernel_wr_read[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_write(gmem_avm_kernel_wr_write[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_address(gmem_avm_kernel_wr_address[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_writedata(gmem_avm_kernel_wr_writedata[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_byteenable(gmem_avm_kernel_wr_byteenable[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_waitrequest(gmem_avm_kernel_wr_waitrequest[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_readdata(gmem_avm_kernel_wr_readdata[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_readdatavalid(gmem_avm_kernel_wr_readdatavalid[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_burstcount(gmem_avm_kernel_wr_burstcount[2]),
      .const_lambda_2_0_avm_memdep_5_const_lambda_2_writeack(gmem_avm_kernel_wr_writeack[2]),
      // AVM const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_enable(gmem_avm_kernel_wr_enable[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_read(gmem_avm_kernel_wr_read[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_write(gmem_avm_kernel_wr_write[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_address(gmem_avm_kernel_wr_address[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_writedata(gmem_avm_kernel_wr_writedata[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_byteenable(gmem_avm_kernel_wr_byteenable[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_waitrequest(gmem_avm_kernel_wr_waitrequest[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_readdata(gmem_avm_kernel_wr_readdata[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid(gmem_avm_kernel_wr_readdatavalid[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_burstcount(gmem_avm_kernel_wr_burstcount[3]),
      .const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_writeack(gmem_avm_kernel_wr_writeack[3]),
      .lmem_invalid_single_bit_0(lmem_invalid_single_bit),
      // AVM avm_lm22189_const_lambda_2_64_0
      .avm_lm22189_const_lambda_2_64_0_enable(local_avm_aspace64_enable[0][0]),
      .avm_lm22189_const_lambda_2_64_0_read(local_avm_aspace64_read[0][0]),
      .avm_lm22189_const_lambda_2_64_0_write(local_avm_aspace64_write[0][0]),
      .avm_lm22189_const_lambda_2_64_0_address(local_avm_aspace64_address[0][0]),
      .avm_lm22189_const_lambda_2_64_0_writedata(local_avm_aspace64_writedata[0][0]),
      .avm_lm22189_const_lambda_2_64_0_byteenable(local_avm_aspace64_byteenable[0][0]),
      .avm_lm22189_const_lambda_2_64_0_waitrequest(local_avm_aspace64_waitrequest[0][0]),
      .avm_lm22189_const_lambda_2_64_0_readdata(local_avm_aspace64_readdata[0][0]),
      .avm_lm22189_const_lambda_2_64_0_readdatavalid(local_avm_aspace64_readdatavalid[0][0]),
      .avm_lm22189_const_lambda_2_64_0_burstcount(local_avm_aspace64_burstcount[0][0]),
      .avm_lm22189_const_lambda_2_64_0_writeack(local_avm_aspace64_writeack[0][0]),
      // AVM avm_memdep_388_const_lambda_2_64_0
      .avm_memdep_388_const_lambda_2_64_0_enable(local_avm_aspace64_enable[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_read(local_avm_aspace64_read[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_write(local_avm_aspace64_write[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_address(local_avm_aspace64_address[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_writedata(local_avm_aspace64_writedata[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_byteenable(local_avm_aspace64_byteenable[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_waitrequest(local_avm_aspace64_waitrequest[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_readdata(local_avm_aspace64_readdata[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_readdatavalid(local_avm_aspace64_readdatavalid[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_burstcount(local_avm_aspace64_burstcount[0][1]),
      .avm_memdep_388_const_lambda_2_64_0_writeack(local_avm_aspace64_writeack[0][1]),
      // AVM avm_lm287_const_lambda_2_65_0
      .avm_lm287_const_lambda_2_65_0_enable(local_avm_aspace65_enable[0][0]),
      .avm_lm287_const_lambda_2_65_0_read(local_avm_aspace65_read[0][0]),
      .avm_lm287_const_lambda_2_65_0_write(local_avm_aspace65_write[0][0]),
      .avm_lm287_const_lambda_2_65_0_address(local_avm_aspace65_address[0][0]),
      .avm_lm287_const_lambda_2_65_0_writedata(local_avm_aspace65_writedata[0][0]),
      .avm_lm287_const_lambda_2_65_0_byteenable(local_avm_aspace65_byteenable[0][0]),
      .avm_lm287_const_lambda_2_65_0_waitrequest(local_avm_aspace65_waitrequest[0][0]),
      .avm_lm287_const_lambda_2_65_0_readdata(local_avm_aspace65_readdata[0][0]),
      .avm_lm287_const_lambda_2_65_0_readdatavalid(local_avm_aspace65_readdatavalid[0][0]),
      .avm_lm287_const_lambda_2_65_0_burstcount(local_avm_aspace65_burstcount[0][0]),
      .avm_lm287_const_lambda_2_65_0_writeack(local_avm_aspace65_writeack[0][0]),
      // AVM avm_memdep_86_const_lambda_2_65_0
      .avm_memdep_86_const_lambda_2_65_0_enable(local_avm_aspace65_enable[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_read(local_avm_aspace65_read[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_write(local_avm_aspace65_write[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_address(local_avm_aspace65_address[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_writedata(local_avm_aspace65_writedata[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_byteenable(local_avm_aspace65_byteenable[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_waitrequest(local_avm_aspace65_waitrequest[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_readdata(local_avm_aspace65_readdata[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_readdatavalid(local_avm_aspace65_readdatavalid[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_burstcount(local_avm_aspace65_burstcount[0][1]),
      .avm_memdep_86_const_lambda_2_65_0_writeack(local_avm_aspace65_writeack[0][1])
   );

   // INST const_lambda_std_ic_inst of const_lambda_std_ic_partition_wrapper
   const_lambda_std_ic_partition_wrapper const_lambda_std_ic_inst
   (
      .clock(clock),
      .resetn(resetn),
      .cra_irq_const_lambda(kernel_irqs[2]),
      // AVS avs_const_lambda_cra
      .avs_const_lambda_cra_enable(cra_ring_node_avm_wire_0_enable),
      .avs_const_lambda_cra_read(cra_ring_node_avm_wire_0_read),
      .avs_const_lambda_cra_write(cra_ring_node_avm_wire_0_write),
      .avs_const_lambda_cra_address(cra_ring_node_avm_wire_0_address),
      .avs_const_lambda_cra_writedata(cra_ring_node_avm_wire_0_writedata),
      .avs_const_lambda_cra_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .avs_const_lambda_cra_readdata(cra_ring_node_avm_wire_0_readdata),
      .avs_const_lambda_cra_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      // AVM const_lambda_0_avm_lm3_const_lambda
      .const_lambda_0_avm_lm3_const_lambda_enable(gmem_avm_kernel_rd_enable[4]),
      .const_lambda_0_avm_lm3_const_lambda_read(gmem_avm_kernel_rd_read[4]),
      .const_lambda_0_avm_lm3_const_lambda_write(gmem_avm_kernel_rd_write[4]),
      .const_lambda_0_avm_lm3_const_lambda_address(gmem_avm_kernel_rd_address[4]),
      .const_lambda_0_avm_lm3_const_lambda_writedata(gmem_avm_kernel_rd_writedata[4]),
      .const_lambda_0_avm_lm3_const_lambda_byteenable(gmem_avm_kernel_rd_byteenable[4]),
      .const_lambda_0_avm_lm3_const_lambda_waitrequest(gmem_avm_kernel_rd_waitrequest[4]),
      .const_lambda_0_avm_lm3_const_lambda_readdata(gmem_avm_kernel_rd_readdata[4]),
      .const_lambda_0_avm_lm3_const_lambda_readdatavalid(gmem_avm_kernel_rd_readdatavalid[4]),
      .const_lambda_0_avm_lm3_const_lambda_burstcount(gmem_avm_kernel_rd_burstcount[4]),
      .const_lambda_0_avm_lm3_const_lambda_writeack(gmem_avm_kernel_rd_writeack[4]),
      // AVM const_lambda_0_avm_lm_const_lambda
      .const_lambda_0_avm_lm_const_lambda_enable(gmem_avm_kernel_rd_enable[5]),
      .const_lambda_0_avm_lm_const_lambda_read(gmem_avm_kernel_rd_read[5]),
      .const_lambda_0_avm_lm_const_lambda_write(gmem_avm_kernel_rd_write[5]),
      .const_lambda_0_avm_lm_const_lambda_address(gmem_avm_kernel_rd_address[5]),
      .const_lambda_0_avm_lm_const_lambda_writedata(gmem_avm_kernel_rd_writedata[5]),
      .const_lambda_0_avm_lm_const_lambda_byteenable(gmem_avm_kernel_rd_byteenable[5]),
      .const_lambda_0_avm_lm_const_lambda_waitrequest(gmem_avm_kernel_rd_waitrequest[5]),
      .const_lambda_0_avm_lm_const_lambda_readdata(gmem_avm_kernel_rd_readdata[5]),
      .const_lambda_0_avm_lm_const_lambda_readdatavalid(gmem_avm_kernel_rd_readdatavalid[5]),
      .const_lambda_0_avm_lm_const_lambda_burstcount(gmem_avm_kernel_rd_burstcount[5]),
      .const_lambda_0_avm_lm_const_lambda_writeack(gmem_avm_kernel_rd_writeack[5]),
      // AVM const_lambda_0_avm_unnamed_const_lambda2_const_lambda
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_enable(gmem_avm_kernel_wr_enable[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_read(gmem_avm_kernel_wr_read[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_write(gmem_avm_kernel_wr_write[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_address(gmem_avm_kernel_wr_address[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_writedata(gmem_avm_kernel_wr_writedata[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_byteenable(gmem_avm_kernel_wr_byteenable[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_waitrequest(gmem_avm_kernel_wr_waitrequest[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_readdata(gmem_avm_kernel_wr_readdata[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_readdatavalid(gmem_avm_kernel_wr_readdatavalid[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_burstcount(gmem_avm_kernel_wr_burstcount[4]),
      .const_lambda_0_avm_unnamed_const_lambda2_const_lambda_writeack(gmem_avm_kernel_wr_writeack[4])
   );

   // INST const_lambda_1_std_ic_inst of const_lambda_1_std_ic_partition_wrapper
   const_lambda_1_std_ic_partition_wrapper const_lambda_1_std_ic_inst
   (
      .clock(clock),
      .resetn(resetn),
      .cra_irq_const_lambda_1(kernel_irqs[3]),
      // AVS avs_const_lambda_1_cra
      .avs_const_lambda_1_cra_enable(cra_ring_node_avm_wire_1_enable),
      .avs_const_lambda_1_cra_read(cra_ring_node_avm_wire_1_read),
      .avs_const_lambda_1_cra_write(cra_ring_node_avm_wire_1_write),
      .avs_const_lambda_1_cra_address(cra_ring_node_avm_wire_1_address),
      .avs_const_lambda_1_cra_writedata(cra_ring_node_avm_wire_1_writedata),
      .avs_const_lambda_1_cra_byteenable(cra_ring_node_avm_wire_1_byteenable),
      .avs_const_lambda_1_cra_readdata(cra_ring_node_avm_wire_1_readdata),
      .avs_const_lambda_1_cra_readdatavalid(cra_ring_node_avm_wire_1_readdatavalid),
      // AVM const_lambda_1_0_avm_lm4_const_lambda_1
      .const_lambda_1_0_avm_lm4_const_lambda_1_enable(gmem_avm_kernel_rd_enable[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_read(gmem_avm_kernel_rd_read[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_write(gmem_avm_kernel_rd_write[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_address(gmem_avm_kernel_rd_address[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_writedata(gmem_avm_kernel_rd_writedata[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_byteenable(gmem_avm_kernel_rd_byteenable[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_waitrequest(gmem_avm_kernel_rd_waitrequest[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_readdata(gmem_avm_kernel_rd_readdata[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_burstcount(gmem_avm_kernel_rd_burstcount[6]),
      .const_lambda_1_0_avm_lm4_const_lambda_1_writeack(gmem_avm_kernel_rd_writeack[6]),
      // AVM const_lambda_1_0_avm_lm_const_lambda_1
      .const_lambda_1_0_avm_lm_const_lambda_1_enable(gmem_avm_kernel_rd_enable[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_read(gmem_avm_kernel_rd_read[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_write(gmem_avm_kernel_rd_write[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_address(gmem_avm_kernel_rd_address[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_writedata(gmem_avm_kernel_rd_writedata[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_byteenable(gmem_avm_kernel_rd_byteenable[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_waitrequest(gmem_avm_kernel_rd_waitrequest[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_readdata(gmem_avm_kernel_rd_readdata[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_burstcount(gmem_avm_kernel_rd_burstcount[7]),
      .const_lambda_1_0_avm_lm_const_lambda_1_writeack(gmem_avm_kernel_rd_writeack[7]),
      // AVM const_lambda_1_0_avm_memdep_const_lambda_1
      .const_lambda_1_0_avm_memdep_const_lambda_1_enable(gmem_avm_kernel_wr_enable[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_read(gmem_avm_kernel_wr_read[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_write(gmem_avm_kernel_wr_write[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_address(gmem_avm_kernel_wr_address[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_writedata(gmem_avm_kernel_wr_writedata[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_byteenable(gmem_avm_kernel_wr_byteenable[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_waitrequest(gmem_avm_kernel_wr_waitrequest[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_readdata(gmem_avm_kernel_wr_readdata[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_readdatavalid(gmem_avm_kernel_wr_readdatavalid[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_burstcount(gmem_avm_kernel_wr_burstcount[5]),
      .const_lambda_1_0_avm_memdep_const_lambda_1_writeack(gmem_avm_kernel_wr_writeack[5]),
      // AVM const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_enable(gmem_avm_kernel_wr_enable[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_read(gmem_avm_kernel_wr_read[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_write(gmem_avm_kernel_wr_write[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_address(gmem_avm_kernel_wr_address[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_writedata(gmem_avm_kernel_wr_writedata[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_byteenable(gmem_avm_kernel_wr_byteenable[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_waitrequest(gmem_avm_kernel_wr_waitrequest[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_readdata(gmem_avm_kernel_wr_readdata[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid(gmem_avm_kernel_wr_readdatavalid[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_burstcount(gmem_avm_kernel_wr_burstcount[6]),
      .const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_writeack(gmem_avm_kernel_wr_writeack[6])
   );

   // INST const_lambda_4_std_ic_inst of const_lambda_4_std_ic_partition_wrapper
   const_lambda_4_std_ic_partition_wrapper const_lambda_4_std_ic_inst
   (
      .clock(clock),
      .resetn(resetn),
      .cra_irq_const_lambda_4(kernel_irqs[4]),
      // AVS avs_const_lambda_4_cra
      .avs_const_lambda_4_cra_enable(cra_ring_node_avm_wire_4_enable),
      .avs_const_lambda_4_cra_read(cra_ring_node_avm_wire_4_read),
      .avs_const_lambda_4_cra_write(cra_ring_node_avm_wire_4_write),
      .avs_const_lambda_4_cra_address(cra_ring_node_avm_wire_4_address),
      .avs_const_lambda_4_cra_writedata(cra_ring_node_avm_wire_4_writedata),
      .avs_const_lambda_4_cra_byteenable(cra_ring_node_avm_wire_4_byteenable),
      .avs_const_lambda_4_cra_readdata(cra_ring_node_avm_wire_4_readdata),
      .avs_const_lambda_4_cra_readdatavalid(cra_ring_node_avm_wire_4_readdatavalid),
      // AVM const_lambda_4_0_avm_lm1_const_lambda_4
      .const_lambda_4_0_avm_lm1_const_lambda_4_enable(gmem_avm_kernel_rd_enable[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_read(gmem_avm_kernel_rd_read[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_write(gmem_avm_kernel_rd_write[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_address(gmem_avm_kernel_rd_address[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_writedata(gmem_avm_kernel_rd_writedata[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_byteenable(gmem_avm_kernel_rd_byteenable[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_waitrequest(gmem_avm_kernel_rd_waitrequest[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_readdata(gmem_avm_kernel_rd_readdata[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_readdatavalid(gmem_avm_kernel_rd_readdatavalid[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_burstcount(gmem_avm_kernel_rd_burstcount[8]),
      .const_lambda_4_0_avm_lm1_const_lambda_4_writeack(gmem_avm_kernel_rd_writeack[8]),
      // AVM const_lambda_4_0_avm_lm_const_lambda_4
      .const_lambda_4_0_avm_lm_const_lambda_4_enable(gmem_avm_kernel_rd_enable[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_read(gmem_avm_kernel_rd_read[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_write(gmem_avm_kernel_rd_write[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_address(gmem_avm_kernel_rd_address[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_writedata(gmem_avm_kernel_rd_writedata[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_byteenable(gmem_avm_kernel_rd_byteenable[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_waitrequest(gmem_avm_kernel_rd_waitrequest[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_readdata(gmem_avm_kernel_rd_readdata[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_readdatavalid(gmem_avm_kernel_rd_readdatavalid[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_burstcount(gmem_avm_kernel_rd_burstcount[9]),
      .const_lambda_4_0_avm_lm_const_lambda_4_writeack(gmem_avm_kernel_rd_writeack[9]),
      // AVM const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_enable(gmem_avm_kernel_rd_enable[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_read(gmem_avm_kernel_rd_read[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_write(gmem_avm_kernel_rd_write[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_address(gmem_avm_kernel_rd_address[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_writedata(gmem_avm_kernel_rd_writedata[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_byteenable(gmem_avm_kernel_rd_byteenable[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_waitrequest(gmem_avm_kernel_rd_waitrequest[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_readdata(gmem_avm_kernel_rd_readdata[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid(gmem_avm_kernel_rd_readdatavalid[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_burstcount(gmem_avm_kernel_rd_burstcount[10]),
      .const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_writeack(gmem_avm_kernel_rd_writeack[10]),
      // AVM const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_enable(gmem_avm_kernel_wr_enable[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_read(gmem_avm_kernel_wr_read[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_write(gmem_avm_kernel_wr_write[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_address(gmem_avm_kernel_wr_address[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_writedata(gmem_avm_kernel_wr_writedata[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_byteenable(gmem_avm_kernel_wr_byteenable[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_waitrequest(gmem_avm_kernel_wr_waitrequest[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_readdata(gmem_avm_kernel_wr_readdata[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid(gmem_avm_kernel_wr_readdatavalid[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_burstcount(gmem_avm_kernel_wr_burstcount[7]),
      .const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_writeack(gmem_avm_kernel_wr_writeack[7])
   );

   // INST lsu_ic_top_gmem of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(35),
      .MWIDTH_BYTES(8),
      .BURST_CNT_W(1),
      .NUM_RD_PORT(11),
      .NUM_WR_PORT(8),
      .NUM_DIMM(1),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .HYPER_PIPELINE(1),
      .ENABLE_BSP_WAITREQUEST_ALLOWANCE(0),
      .ENABLE_BSP_AVMM_WRITE_ACK(0),
      .WRITE_ACK_FIFO_DEPTH(1024),
      .AVM_WRITE_DATA_LATENESS(0),
      .AVM_READ_DATA_LATENESS(0),
      .WIDE_DATA_SLICING(0),
      .ROOT_FIFO_STALL_IN_EARLINESS(0),
      .ROOT_WFIFO_VALID_IN_EARLINESS(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .PIPELINE_RD_RETURN(0),
      .NUM_AVM_OUTPUT_PIPE_STAGES(1),
      .ROOT_FIFO_DEPTH(512),
      .RETURN_DATA_FIFO_DEPTH(512),
      .MAX_REQUESTS_PER_LSU(4),
      .NUM_MEM_SYSTEMS(1),
      .NUM_BANKS_PER_MEM_SYSTEM({32'd1}),
      .NUM_BANKS_W_PER_MEM_SYSTEM({32'd1}),
      .PERMUTE_BIT_LSB_PER_MEM_SYSTEM({32'd1}),
      .BANK_BIT_LSB_PER_MEM_SYSTEM({32'd34}),
      .ENABLE_BANK_INTERLEAVING({32'd0}),
      .NUM_REORDER_PER_MEM_SYSTEM({32'd1}),
      .ENABLE_SWDIMM(0),
      .ROOT_PORT_MAP(root_map_local_mem0),
      .ROOT_ARB_BALANCED_RW(0),
      .PENDING_RESPONSE_COUNTER_WIDTH(10),
      .SYNCHRONIZE_RESET(1)
   )
   lsu_ic_top_gmem
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(gmem_avm_kernel_rd_read),
      .i_rd_address(gmem_avm_kernel_rd_address),
      .i_rd_burstcount(gmem_avm_kernel_rd_burstcount),
      .o_rd_waitrequest(gmem_avm_kernel_rd_waitrequest),
      .o_avm_readdata(gmem_avm_kernel_rd_readdata),
      .o_avm_readdatavalid(gmem_avm_kernel_rd_readdatavalid),
      .i_wr_byteenable(gmem_avm_kernel_wr_byteenable),
      .i_wr_address(gmem_avm_kernel_wr_address),
      .i_wr_request(gmem_avm_kernel_wr_write),
      .i_wr_burstcount(gmem_avm_kernel_wr_burstcount),
      .i_wr_writedata(gmem_avm_kernel_wr_writedata),
      .o_wr_waitrequest(gmem_avm_kernel_wr_waitrequest),
      .o_avm_writeack(gmem_avm_kernel_wr_writeack),
      .i_avm_waitrequest(gmem_ic_avm_waitrequest),
      .i_avm_write_ack(gmem_ic_avm_writeack),
      .i_avm_readdata(gmem_ic_avm_readdata),
      .i_avm_readdatavalid(gmem_ic_avm_readdatavalid),
      .o_avm_byteenable(gmem_ic_avm_byteenable),
      .o_avm_address(gmem_ic_avm_address),
      .o_avm_read(gmem_ic_avm_read),
      .o_avm_write(gmem_ic_avm_write),
      .o_avm_burstcount(gmem_ic_avm_burstcount),
      .o_avm_writedata(gmem_ic_avm_writedata)
   );

   assign avm_mem_gmem0_0_port_0_0_rw_read = gmem_ic_avm_read[0];
   assign gmem_ic_avm_readdata[0] = avm_mem_gmem0_0_port_0_0_rw_readdata;
   assign avm_mem_gmem0_0_port_0_0_rw_write = gmem_ic_avm_write[0];
   assign avm_mem_gmem0_0_port_0_0_rw_writedata = gmem_ic_avm_writedata[0];
   assign avm_mem_gmem0_0_port_0_0_rw_burstcount = gmem_ic_avm_burstcount[0];
   assign avm_mem_gmem0_0_port_0_0_rw_address = gmem_ic_avm_address[0];
   assign avm_mem_gmem0_0_port_0_0_rw_byteenable = gmem_ic_avm_byteenable[0];
   assign gmem_ic_avm_waitrequest[0] = avm_mem_gmem0_0_port_0_0_rw_waitrequest;
   assign gmem_ic_avm_readdatavalid[0] = avm_mem_gmem0_0_port_0_0_rw_readdatavalid;
   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace64
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [20:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace64_enable[__i][__j]),
               .avm_read(local_avm_aspace64_read[__i][__j]),
               .avm_write(local_avm_aspace64_write[__i][__j]),
               .avm_address(local_avm_aspace64_address[__i][__j]),
               .avm_writedata(local_avm_aspace64_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace64_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace64_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace64_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace64_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace64_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace64_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [20:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Agilex 7"),
               .DEPTH_WORDS(2097152),
               .WIDTH(32),
               .MEM_LATENCY(6),
               .ASYNC_RESET(0),
               .SYNCHRONIZE_RESET(1),
               .ENABLED(0),
               .RDW_MODE("OLD_DATA"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [20:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(21),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [20:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [20:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of paralingam_report_di_ic_10950356974493103552
            paralingam_report_di_ic_10950356974493103552 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [20:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [20:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of paralingam_report_di_ic_8241268795270747462
            paralingam_report_di_ic_8241268795270747462 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace65
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [20:0] local_icm_arb_address [1][2];
      logic [31:0] local_icm_arb_writedata [1][2];
      logic [3:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [31:0] local_icm_rrp_data [1][2];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace65_enable[__j][__k]),
               .avm_read(local_avm_aspace65_read[__j][__k]),
               .avm_write(local_avm_aspace65_write[__j][__k]),
               .avm_address(local_avm_aspace65_address[__j][__k]),
               .avm_writedata(local_avm_aspace65_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace65_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace65_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace65_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace65_readdatavalid[__j][__k]),
               .avm_burstcount(local_avm_aspace65_burstcount[__j][__k]),
               .avm_writeack(local_avm_aspace65_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [20:0] port_address [1:2];
            logic [31:0] port_writedata [1:2];
            logic [3:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [31:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Agilex 7"),
               .DEPTH_WORDS(2097152),
               .WIDTH(32),
               .MEM_LATENCY(6),
               .ASYNC_RESET(0),
               .SYNCHRONIZE_RESET(1),
               .ENABLED(0),
               .RDW_MODE("OLD_DATA"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [20:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(21),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [20:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [20:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of paralingam_report_di_ic_10950356974493103552
            paralingam_report_di_ic_10950356974493103552 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [20:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [20:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of paralingam_report_di_ic_8241268795270747462
            paralingam_report_di_ic_8241268795270747462 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   // INST cra_ring_wrapper_inst of cra_ring_wrapper
   cra_ring_wrapper cra_ring_wrapper_inst
   (
      .clock(clock),
      .resetn(resetn),
      // AVS csr_ring_root_avs
      .csr_ring_root_avs_enable(csr_ring_root_avs_enable),
      .csr_ring_root_avs_read(csr_ring_root_avs_read),
      .csr_ring_root_avs_write(csr_ring_root_avs_write),
      .csr_ring_root_avs_address(csr_ring_root_avs_address),
      .csr_ring_root_avs_writedata(csr_ring_root_avs_writedata),
      .csr_ring_root_avs_byteenable(csr_ring_root_avs_byteenable),
      .csr_ring_root_avs_waitrequest(csr_ring_root_avs_waitrequest),
      .csr_ring_root_avs_readdata(csr_ring_root_avs_readdata),
      .csr_ring_root_avs_readdatavalid(csr_ring_root_avs_readdatavalid),
      // AVM cra_ring_avm_0
      .cra_ring_avm_0_enable(cra_ring_node_avm_wire_3_enable),
      .cra_ring_avm_0_read(cra_ring_node_avm_wire_3_read),
      .cra_ring_avm_0_write(cra_ring_node_avm_wire_3_write),
      .cra_ring_avm_0_address(cra_ring_node_avm_wire_3_address),
      .cra_ring_avm_0_writedata(cra_ring_node_avm_wire_3_writedata),
      .cra_ring_avm_0_byteenable(cra_ring_node_avm_wire_3_byteenable),
      .cra_ring_avm_0_readdata(cra_ring_node_avm_wire_3_readdata),
      .cra_ring_avm_0_readdatavalid(cra_ring_node_avm_wire_3_readdatavalid),
      .cra_ring_avm_0_burstcount(cra_ring_node_avm_wire_3_burstcount),
      // AVM cra_ring_avm_1
      .cra_ring_avm_1_enable(cra_ring_node_avm_wire_2_enable),
      .cra_ring_avm_1_read(cra_ring_node_avm_wire_2_read),
      .cra_ring_avm_1_write(cra_ring_node_avm_wire_2_write),
      .cra_ring_avm_1_address(cra_ring_node_avm_wire_2_address),
      .cra_ring_avm_1_writedata(cra_ring_node_avm_wire_2_writedata),
      .cra_ring_avm_1_byteenable(cra_ring_node_avm_wire_2_byteenable),
      .cra_ring_avm_1_readdata(cra_ring_node_avm_wire_2_readdata),
      .cra_ring_avm_1_readdatavalid(cra_ring_node_avm_wire_2_readdatavalid),
      .cra_ring_avm_1_burstcount(cra_ring_node_avm_wire_2_burstcount),
      // AVM cra_ring_avm_2
      .cra_ring_avm_2_enable(cra_ring_node_avm_wire_0_enable),
      .cra_ring_avm_2_read(cra_ring_node_avm_wire_0_read),
      .cra_ring_avm_2_write(cra_ring_node_avm_wire_0_write),
      .cra_ring_avm_2_address(cra_ring_node_avm_wire_0_address),
      .cra_ring_avm_2_writedata(cra_ring_node_avm_wire_0_writedata),
      .cra_ring_avm_2_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .cra_ring_avm_2_readdata(cra_ring_node_avm_wire_0_readdata),
      .cra_ring_avm_2_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      .cra_ring_avm_2_burstcount(cra_ring_node_avm_wire_0_burstcount),
      // AVM cra_ring_avm_3
      .cra_ring_avm_3_enable(cra_ring_node_avm_wire_1_enable),
      .cra_ring_avm_3_read(cra_ring_node_avm_wire_1_read),
      .cra_ring_avm_3_write(cra_ring_node_avm_wire_1_write),
      .cra_ring_avm_3_address(cra_ring_node_avm_wire_1_address),
      .cra_ring_avm_3_writedata(cra_ring_node_avm_wire_1_writedata),
      .cra_ring_avm_3_byteenable(cra_ring_node_avm_wire_1_byteenable),
      .cra_ring_avm_3_readdata(cra_ring_node_avm_wire_1_readdata),
      .cra_ring_avm_3_readdatavalid(cra_ring_node_avm_wire_1_readdatavalid),
      .cra_ring_avm_3_burstcount(cra_ring_node_avm_wire_1_burstcount),
      // AVM cra_ring_avm_4
      .cra_ring_avm_4_enable(cra_ring_node_avm_wire_4_enable),
      .cra_ring_avm_4_read(cra_ring_node_avm_wire_4_read),
      .cra_ring_avm_4_write(cra_ring_node_avm_wire_4_write),
      .cra_ring_avm_4_address(cra_ring_node_avm_wire_4_address),
      .cra_ring_avm_4_writedata(cra_ring_node_avm_wire_4_writedata),
      .cra_ring_avm_4_byteenable(cra_ring_node_avm_wire_4_byteenable),
      .cra_ring_avm_4_readdata(cra_ring_node_avm_wire_4_readdata),
      .cra_ring_avm_4_readdatavalid(cra_ring_node_avm_wire_4_readdatavalid),
      .cra_ring_avm_4_burstcount(cra_ring_node_avm_wire_4_burstcount)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_3_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module const_lambda_3_std_ic_partition_wrapper
(
   input logic clock,
   input logic resetn,
   output logic cra_irq_const_lambda_3,
   // AVS avs_const_lambda_3_cra
   input logic avs_const_lambda_3_cra_enable,
   input logic avs_const_lambda_3_cra_read,
   input logic avs_const_lambda_3_cra_write,
   input logic [4:0] avs_const_lambda_3_cra_address,
   input logic [63:0] avs_const_lambda_3_cra_writedata,
   input logic [7:0] avs_const_lambda_3_cra_byteenable,
   output logic [63:0] avs_const_lambda_3_cra_readdata,
   output logic avs_const_lambda_3_cra_readdatavalid,
   // AVM const_lambda_3_0_avm_lm_const_lambda_3
   output logic const_lambda_3_0_avm_lm_const_lambda_3_enable,
   output logic const_lambda_3_0_avm_lm_const_lambda_3_read,
   output logic const_lambda_3_0_avm_lm_const_lambda_3_write,
   output logic [34:0] const_lambda_3_0_avm_lm_const_lambda_3_address,
   output logic [63:0] const_lambda_3_0_avm_lm_const_lambda_3_writedata,
   output logic [7:0] const_lambda_3_0_avm_lm_const_lambda_3_byteenable,
   input logic const_lambda_3_0_avm_lm_const_lambda_3_waitrequest,
   input logic [63:0] const_lambda_3_0_avm_lm_const_lambda_3_readdata,
   input logic const_lambda_3_0_avm_lm_const_lambda_3_readdatavalid,
   output logic const_lambda_3_0_avm_lm_const_lambda_3_burstcount,
   input logic const_lambda_3_0_avm_lm_const_lambda_3_writeack,
   // AVM const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3
   output logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_enable,
   output logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_read,
   output logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_write,
   output logic [34:0] const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_address,
   output logic [63:0] const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_writedata,
   output logic [7:0] const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_byteenable,
   input logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_waitrequest,
   input logic [63:0] const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_readdata,
   input logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid,
   output logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_burstcount,
   input logic const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_writeack
);
   logic const_lambda_3_start;
   logic [0:0] const_lambda_3_start_chain;
   logic [0:0] const_lambda_3_start_kernel_copy;
   logic [0:0] const_lambda_3_start_task_fd;
   logic [0:0] const_lambda_3_start_finish_element;
   logic const_lambda_3_finish_sig;
   logic [0:0] const_lambda_3_finish_kernel_copy;
   logic [0:0] const_lambda_3_finish_chain;
   logic [63:0] const_lambda_3_global_size [2:0];
   logic [31:0] const_lambda_3_num_groups [2:0];
   logic [31:0] const_lambda_3_local_size [2:0];
   logic [63:0] const_lambda_3_global_offset [2:0];
   logic [31:0] const_lambda_3_work_dim;
   logic [31:0] const_lambda_3_wg_size;
   logic [0:0] const_lambda_3_wg_disp_stall_in;
   logic [0:0] const_lambda_3_wg_disp_stall_in_lookahead;
   logic [0:0] const_lambda_3_wg_disp_valid_out;
   logic const_lambda_3_wg_disp_start_out;
   logic [31:0] const_lambda_3_wg_disp_group_id_out [2:0];
   logic [31:0] const_lambda_3_wg_disp_global_id_base_out [2:0];
   logic const_lambda_3_wg_disp_dispatched_all_groups;
   logic [63:0] const_lambda_3_global_id [1][2:0];
   logic [31:0] const_lambda_3_local_id [1][2:0];
   logic [31:0] const_lambda_3_group_id [1][2:0];
   logic [0:0] const_lambda_3_pending_write;
   logic [0:0] const_lambda_3_lsu_active;
   logic [0:0] const_lambda_3_valid_in;
   logic [0:0] const_lambda_3_valid_out;
   logic [0:0] const_lambda_3_stall_in;
   logic [0:0] const_lambda_3_stall_out;
   logic const_lambda_3_csr_pending_write;
   logic const_lambda_3_csr_lsu_active;
   logic const_lambda_3_csr_valid_in;
   logic const_lambda_3_resetn_delayed;
   logic [767:0] const_lambda_3_kernel_arguments;

   assign const_lambda_3_start_chain[0] = const_lambda_3_start;
   assign const_lambda_3_finish_chain[0] = 1'b1;
   assign const_lambda_3_csr_pending_write = |const_lambda_3_pending_write;
   assign const_lambda_3_csr_lsu_active = |const_lambda_3_lsu_active;
   assign const_lambda_3_csr_valid_in = |const_lambda_3_valid_in;
   assign const_lambda_3_stall_in = 0;
   // INST const_lambda_3_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_3_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_3_start),
      .num_groups(const_lambda_3_num_groups),
      .local_size(const_lambda_3_local_size),
      .stall_in(const_lambda_3_wg_disp_stall_in),
      .stall_in_lookahead(const_lambda_3_wg_disp_stall_in_lookahead),
      .valid_out(const_lambda_3_wg_disp_valid_out),
      .group_id_out(const_lambda_3_wg_disp_group_id_out),
      .global_id_base_out(const_lambda_3_wg_disp_global_id_base_out),
      .start_out(const_lambda_3_wg_disp_start_out),
      .dispatched_all_groups(const_lambda_3_wg_disp_dispatched_all_groups)
   );

   // INST const_lambda_3_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(16),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_3_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_3_start),
      .wg_size(const_lambda_3_wg_size),
      .wg_dispatch_valid_out(const_lambda_3_wg_disp_valid_out),
      .wg_dispatch_stall_in(const_lambda_3_wg_disp_stall_in),
      .dispatched_all_groups(const_lambda_3_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(const_lambda_3_valid_out),
      .kernel_copy_stall_in(const_lambda_3_stall_in),
      .pending_writes(const_lambda_3_csr_pending_write),
      .finish(const_lambda_3_finish_sig)
   );

   // INST const_lambda_3_csr_agent_inst of const_lambda_3_function_cra_agent
   const_lambda_3_function_cra_agent const_lambda_3_csr_agent_inst
   (
      .clock(clock),
      .resetn(const_lambda_3_resetn_delayed),
      .kernel_start(const_lambda_3_start),
      .kernel_done(const_lambda_3_finish_sig),
      .global_offset_0(const_lambda_3_global_offset[0]),
      .global_offset_1(const_lambda_3_global_offset[1]),
      .global_offset_2(const_lambda_3_global_offset[2]),
      .work_dim(const_lambda_3_work_dim),
      .has_a_lsu_active(const_lambda_3_csr_lsu_active),
      .has_a_write_pending(const_lambda_3_csr_pending_write),
      .valid_in(const_lambda_3_csr_valid_in),
      .global_size_0(const_lambda_3_global_size[0]),
      .global_size_1(const_lambda_3_global_size[1]),
      .global_size_2(const_lambda_3_global_size[2]),
      .num_groups_0(const_lambda_3_num_groups[0]),
      .num_groups_1(const_lambda_3_num_groups[1]),
      .num_groups_2(const_lambda_3_num_groups[2]),
      .local_size_0(const_lambda_3_local_size[0]),
      .local_size_1(const_lambda_3_local_size[1]),
      .local_size_2(const_lambda_3_local_size[2]),
      .workgroup_size(const_lambda_3_wg_size),
      .kernel_arguments(const_lambda_3_kernel_arguments),
      .cra_irq(cra_irq_const_lambda_3),
      // AVS avs_cra
      .avs_cra_enable(avs_const_lambda_3_cra_enable),
      .avs_cra_read(avs_const_lambda_3_cra_read),
      .avs_cra_write(avs_const_lambda_3_cra_write),
      .avs_cra_address(avs_const_lambda_3_cra_address),
      .avs_cra_writedata(avs_const_lambda_3_cra_writedata),
      .avs_cra_byteenable(avs_const_lambda_3_cra_byteenable),
      .avs_cra_readdata(avs_const_lambda_3_cra_readdata),
      .avs_cra_readdatavalid(avs_const_lambda_3_cra_readdatavalid)
   );

   // INST const_lambda_3_csr_agent_reset_delay_inst of acl_reset_handler
   acl_reset_handler
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_ACLRN(1),
      .USE_SYNCHRONIZER(1),
      .PULSE_EXTENSION(0),
      .PIPE_DEPTH(10),
      .NUM_COPIES(1)
   )
   const_lambda_3_csr_agent_reset_delay_inst
   (
      .clk(clock),
      .i_resetn(resetn),
      .o_aclrn(),
      .o_sclrn(const_lambda_3_resetn_delayed),
      .o_resetn_synchronized()
   );

   // INST const_lambda_3_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   const_lambda_3_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_3_wg_disp_start_out),
      .valid_in(const_lambda_3_wg_disp_valid_out[0]),
      .stall_out(const_lambda_3_wg_disp_stall_in[0]),
      .stall_out_lookahead(const_lambda_3_wg_disp_stall_in_lookahead[0]),
      .stall_in(const_lambda_3_stall_out[0]),
      .valid_out(const_lambda_3_valid_in[0]),
      .group_id_in(const_lambda_3_wg_disp_group_id_out),
      .global_id_base_in(const_lambda_3_wg_disp_global_id_base_out),
      .local_size(const_lambda_3_local_size),
      .global_size(const_lambda_3_global_size),
      .global_work_offset(const_lambda_3_global_offset),
      .local_id(const_lambda_3_local_id[0]),
      .global_id(const_lambda_3_global_id[0]),
      .group_id(const_lambda_3_group_id[0])
   );

   // INST const_lambda_3_inst_0 of const_lambda_3_top_wrapper_0
   const_lambda_3_top_wrapper_0 const_lambda_3_inst_0
   (
      .start(const_lambda_3_start_kernel_copy[0]),
      .kernel_arguments(const_lambda_3_kernel_arguments),
      .work_dim(const_lambda_3_work_dim),
      .global_offset(const_lambda_3_global_offset),
      .kernel_valid_out(const_lambda_3_valid_out[0]),
      .has_a_write_pending(const_lambda_3_pending_write[0]),
      .has_a_lsu_active(const_lambda_3_lsu_active[0]),
      .global_id(const_lambda_3_global_id[0]),
      .local_id(const_lambda_3_local_id[0]),
      .group_id(const_lambda_3_group_id[0]),
      .global_size(const_lambda_3_global_size),
      .local_size(const_lambda_3_local_size),
      .num_groups(const_lambda_3_num_groups),
      .workgroup_size(const_lambda_3_wg_size),
      .kernel_stall_out(const_lambda_3_stall_out[0]),
      .kernel_valid_in(const_lambda_3_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm_const_lambda_3
      .avm_lm_const_lambda_3_enable(const_lambda_3_0_avm_lm_const_lambda_3_enable),
      .avm_lm_const_lambda_3_read(const_lambda_3_0_avm_lm_const_lambda_3_read),
      .avm_lm_const_lambda_3_write(const_lambda_3_0_avm_lm_const_lambda_3_write),
      .avm_lm_const_lambda_3_address(const_lambda_3_0_avm_lm_const_lambda_3_address),
      .avm_lm_const_lambda_3_writedata(const_lambda_3_0_avm_lm_const_lambda_3_writedata),
      .avm_lm_const_lambda_3_byteenable(const_lambda_3_0_avm_lm_const_lambda_3_byteenable),
      .avm_lm_const_lambda_3_waitrequest(const_lambda_3_0_avm_lm_const_lambda_3_waitrequest),
      .avm_lm_const_lambda_3_readdata(const_lambda_3_0_avm_lm_const_lambda_3_readdata),
      .avm_lm_const_lambda_3_readdatavalid(const_lambda_3_0_avm_lm_const_lambda_3_readdatavalid),
      .avm_lm_const_lambda_3_burstcount(const_lambda_3_0_avm_lm_const_lambda_3_burstcount),
      .avm_lm_const_lambda_3_writeack(const_lambda_3_0_avm_lm_const_lambda_3_writeack),
      // AVM avm_unnamed_const_lambda_31_const_lambda_3
      .avm_unnamed_const_lambda_31_const_lambda_3_enable(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_enable),
      .avm_unnamed_const_lambda_31_const_lambda_3_read(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_read),
      .avm_unnamed_const_lambda_31_const_lambda_3_write(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_write),
      .avm_unnamed_const_lambda_31_const_lambda_3_address(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_address),
      .avm_unnamed_const_lambda_31_const_lambda_3_writedata(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_writedata),
      .avm_unnamed_const_lambda_31_const_lambda_3_byteenable(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_byteenable),
      .avm_unnamed_const_lambda_31_const_lambda_3_waitrequest(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_waitrequest),
      .avm_unnamed_const_lambda_31_const_lambda_3_readdata(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_readdata),
      .avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid),
      .avm_unnamed_const_lambda_31_const_lambda_3_burstcount(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_burstcount),
      .avm_unnamed_const_lambda_31_const_lambda_3_writeack(const_lambda_3_0_avm_unnamed_const_lambda_31_const_lambda_3_writeack)
   );

   // INST const_lambda_3_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1)
   )
   const_lambda_3_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(const_lambda_3_start_chain[0]),
      .start_kernel(const_lambda_3_start_kernel_copy[0]),
      .start_finish_detector(const_lambda_3_start_task_fd[0]),
      .start_finish_chain_element(const_lambda_3_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_2_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module const_lambda_2_std_ic_partition_wrapper
(
   input logic clock,
   input logic resetn,
   output logic cra_irq_const_lambda_2,
   // AVS avs_const_lambda_2_cra
   input logic avs_const_lambda_2_cra_enable,
   input logic avs_const_lambda_2_cra_read,
   input logic avs_const_lambda_2_cra_write,
   input logic [5:0] avs_const_lambda_2_cra_address,
   input logic [63:0] avs_const_lambda_2_cra_writedata,
   input logic [7:0] avs_const_lambda_2_cra_byteenable,
   output logic [63:0] avs_const_lambda_2_cra_readdata,
   output logic avs_const_lambda_2_cra_readdatavalid,
   // AVM const_lambda_2_0_avm_lm16_const_lambda_2
   output logic const_lambda_2_0_avm_lm16_const_lambda_2_enable,
   output logic const_lambda_2_0_avm_lm16_const_lambda_2_read,
   output logic const_lambda_2_0_avm_lm16_const_lambda_2_write,
   output logic [34:0] const_lambda_2_0_avm_lm16_const_lambda_2_address,
   output logic [63:0] const_lambda_2_0_avm_lm16_const_lambda_2_writedata,
   output logic [7:0] const_lambda_2_0_avm_lm16_const_lambda_2_byteenable,
   input logic const_lambda_2_0_avm_lm16_const_lambda_2_waitrequest,
   input logic [63:0] const_lambda_2_0_avm_lm16_const_lambda_2_readdata,
   input logic const_lambda_2_0_avm_lm16_const_lambda_2_readdatavalid,
   output logic const_lambda_2_0_avm_lm16_const_lambda_2_burstcount,
   input logic const_lambda_2_0_avm_lm16_const_lambda_2_writeack,
   // AVM const_lambda_2_0_avm_lm18_const_lambda_2
   output logic const_lambda_2_0_avm_lm18_const_lambda_2_enable,
   output logic const_lambda_2_0_avm_lm18_const_lambda_2_read,
   output logic const_lambda_2_0_avm_lm18_const_lambda_2_write,
   output logic [34:0] const_lambda_2_0_avm_lm18_const_lambda_2_address,
   output logic [63:0] const_lambda_2_0_avm_lm18_const_lambda_2_writedata,
   output logic [7:0] const_lambda_2_0_avm_lm18_const_lambda_2_byteenable,
   input logic const_lambda_2_0_avm_lm18_const_lambda_2_waitrequest,
   input logic [63:0] const_lambda_2_0_avm_lm18_const_lambda_2_readdata,
   input logic const_lambda_2_0_avm_lm18_const_lambda_2_readdatavalid,
   output logic const_lambda_2_0_avm_lm18_const_lambda_2_burstcount,
   input logic const_lambda_2_0_avm_lm18_const_lambda_2_writeack,
   // AVM const_lambda_2_0_avm_lm9_const_lambda_2
   output logic const_lambda_2_0_avm_lm9_const_lambda_2_enable,
   output logic const_lambda_2_0_avm_lm9_const_lambda_2_read,
   output logic const_lambda_2_0_avm_lm9_const_lambda_2_write,
   output logic [34:0] const_lambda_2_0_avm_lm9_const_lambda_2_address,
   output logic [63:0] const_lambda_2_0_avm_lm9_const_lambda_2_writedata,
   output logic [7:0] const_lambda_2_0_avm_lm9_const_lambda_2_byteenable,
   input logic const_lambda_2_0_avm_lm9_const_lambda_2_waitrequest,
   input logic [63:0] const_lambda_2_0_avm_lm9_const_lambda_2_readdata,
   input logic const_lambda_2_0_avm_lm9_const_lambda_2_readdatavalid,
   output logic const_lambda_2_0_avm_lm9_const_lambda_2_burstcount,
   input logic const_lambda_2_0_avm_lm9_const_lambda_2_writeack,
   // AVM const_lambda_2_0_avm_memdep_4_const_lambda_2
   output logic const_lambda_2_0_avm_memdep_4_const_lambda_2_enable,
   output logic const_lambda_2_0_avm_memdep_4_const_lambda_2_read,
   output logic const_lambda_2_0_avm_memdep_4_const_lambda_2_write,
   output logic [34:0] const_lambda_2_0_avm_memdep_4_const_lambda_2_address,
   output logic [63:0] const_lambda_2_0_avm_memdep_4_const_lambda_2_writedata,
   output logic [7:0] const_lambda_2_0_avm_memdep_4_const_lambda_2_byteenable,
   input logic const_lambda_2_0_avm_memdep_4_const_lambda_2_waitrequest,
   input logic [63:0] const_lambda_2_0_avm_memdep_4_const_lambda_2_readdata,
   input logic const_lambda_2_0_avm_memdep_4_const_lambda_2_readdatavalid,
   output logic const_lambda_2_0_avm_memdep_4_const_lambda_2_burstcount,
   input logic const_lambda_2_0_avm_memdep_4_const_lambda_2_writeack,
   // AVM const_lambda_2_0_avm_memdep_5_const_lambda_2
   output logic const_lambda_2_0_avm_memdep_5_const_lambda_2_enable,
   output logic const_lambda_2_0_avm_memdep_5_const_lambda_2_read,
   output logic const_lambda_2_0_avm_memdep_5_const_lambda_2_write,
   output logic [34:0] const_lambda_2_0_avm_memdep_5_const_lambda_2_address,
   output logic [63:0] const_lambda_2_0_avm_memdep_5_const_lambda_2_writedata,
   output logic [7:0] const_lambda_2_0_avm_memdep_5_const_lambda_2_byteenable,
   input logic const_lambda_2_0_avm_memdep_5_const_lambda_2_waitrequest,
   input logic [63:0] const_lambda_2_0_avm_memdep_5_const_lambda_2_readdata,
   input logic const_lambda_2_0_avm_memdep_5_const_lambda_2_readdatavalid,
   output logic const_lambda_2_0_avm_memdep_5_const_lambda_2_burstcount,
   input logic const_lambda_2_0_avm_memdep_5_const_lambda_2_writeack,
   // AVM const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2
   output logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_enable,
   output logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_read,
   output logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_write,
   output logic [34:0] const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_address,
   output logic [63:0] const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_writedata,
   output logic [7:0] const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_byteenable,
   input logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_waitrequest,
   input logic [63:0] const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_readdata,
   input logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid,
   output logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_burstcount,
   input logic const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_writeack,
   input logic lmem_invalid_single_bit_0,
   // AVM avm_lm22189_const_lambda_2_64_0
   output logic avm_lm22189_const_lambda_2_64_0_enable,
   output logic avm_lm22189_const_lambda_2_64_0_read,
   output logic avm_lm22189_const_lambda_2_64_0_write,
   output logic [31:0] avm_lm22189_const_lambda_2_64_0_address,
   output logic [31:0] avm_lm22189_const_lambda_2_64_0_writedata,
   output logic [3:0] avm_lm22189_const_lambda_2_64_0_byteenable,
   input logic avm_lm22189_const_lambda_2_64_0_waitrequest,
   input logic [31:0] avm_lm22189_const_lambda_2_64_0_readdata,
   input logic avm_lm22189_const_lambda_2_64_0_readdatavalid,
   output logic avm_lm22189_const_lambda_2_64_0_burstcount,
   input logic avm_lm22189_const_lambda_2_64_0_writeack,
   // AVM avm_memdep_388_const_lambda_2_64_0
   output logic avm_memdep_388_const_lambda_2_64_0_enable,
   output logic avm_memdep_388_const_lambda_2_64_0_read,
   output logic avm_memdep_388_const_lambda_2_64_0_write,
   output logic [31:0] avm_memdep_388_const_lambda_2_64_0_address,
   output logic [31:0] avm_memdep_388_const_lambda_2_64_0_writedata,
   output logic [3:0] avm_memdep_388_const_lambda_2_64_0_byteenable,
   input logic avm_memdep_388_const_lambda_2_64_0_waitrequest,
   input logic [31:0] avm_memdep_388_const_lambda_2_64_0_readdata,
   input logic avm_memdep_388_const_lambda_2_64_0_readdatavalid,
   output logic avm_memdep_388_const_lambda_2_64_0_burstcount,
   input logic avm_memdep_388_const_lambda_2_64_0_writeack,
   // AVM avm_lm287_const_lambda_2_65_0
   output logic avm_lm287_const_lambda_2_65_0_enable,
   output logic avm_lm287_const_lambda_2_65_0_read,
   output logic avm_lm287_const_lambda_2_65_0_write,
   output logic [31:0] avm_lm287_const_lambda_2_65_0_address,
   output logic [31:0] avm_lm287_const_lambda_2_65_0_writedata,
   output logic [3:0] avm_lm287_const_lambda_2_65_0_byteenable,
   input logic avm_lm287_const_lambda_2_65_0_waitrequest,
   input logic [31:0] avm_lm287_const_lambda_2_65_0_readdata,
   input logic avm_lm287_const_lambda_2_65_0_readdatavalid,
   output logic avm_lm287_const_lambda_2_65_0_burstcount,
   input logic avm_lm287_const_lambda_2_65_0_writeack,
   // AVM avm_memdep_86_const_lambda_2_65_0
   output logic avm_memdep_86_const_lambda_2_65_0_enable,
   output logic avm_memdep_86_const_lambda_2_65_0_read,
   output logic avm_memdep_86_const_lambda_2_65_0_write,
   output logic [31:0] avm_memdep_86_const_lambda_2_65_0_address,
   output logic [31:0] avm_memdep_86_const_lambda_2_65_0_writedata,
   output logic [3:0] avm_memdep_86_const_lambda_2_65_0_byteenable,
   input logic avm_memdep_86_const_lambda_2_65_0_waitrequest,
   input logic [31:0] avm_memdep_86_const_lambda_2_65_0_readdata,
   input logic avm_memdep_86_const_lambda_2_65_0_readdatavalid,
   output logic avm_memdep_86_const_lambda_2_65_0_burstcount,
   input logic avm_memdep_86_const_lambda_2_65_0_writeack
);
   logic const_lambda_2_start;
   logic [0:0] const_lambda_2_start_chain;
   logic [0:0] const_lambda_2_start_kernel_copy;
   logic [0:0] const_lambda_2_start_task_fd;
   logic [0:0] const_lambda_2_start_finish_element;
   logic const_lambda_2_finish_sig;
   logic [0:0] const_lambda_2_finish_kernel_copy;
   logic [0:0] const_lambda_2_finish_chain;
   logic [63:0] const_lambda_2_global_size [2:0];
   logic [31:0] const_lambda_2_num_groups [2:0];
   logic [31:0] const_lambda_2_local_size [2:0];
   logic [63:0] const_lambda_2_global_offset [2:0];
   logic [31:0] const_lambda_2_work_dim;
   logic [31:0] const_lambda_2_wg_size;
   logic [0:0] const_lambda_2_wg_disp_stall_in;
   logic [0:0] const_lambda_2_wg_disp_stall_in_lookahead;
   logic [0:0] const_lambda_2_wg_disp_valid_out;
   logic const_lambda_2_wg_disp_start_out;
   logic [31:0] const_lambda_2_wg_disp_group_id_out [2:0];
   logic [31:0] const_lambda_2_wg_disp_global_id_base_out [2:0];
   logic const_lambda_2_wg_disp_dispatched_all_groups;
   logic [63:0] const_lambda_2_global_id [1][2:0];
   logic [31:0] const_lambda_2_local_id [1][2:0];
   logic [31:0] const_lambda_2_group_id [1][2:0];
   logic [0:0] const_lambda_2_pending_write;
   logic [0:0] const_lambda_2_lsu_active;
   logic [0:0] const_lambda_2_valid_in;
   logic [0:0] const_lambda_2_valid_out;
   logic [0:0] const_lambda_2_stall_in;
   logic [0:0] const_lambda_2_stall_out;
   logic const_lambda_2_csr_pending_write;
   logic const_lambda_2_csr_lsu_active;
   logic const_lambda_2_csr_valid_in;
   logic const_lambda_2_resetn_delayed;
   logic [1407:0] const_lambda_2_kernel_arguments;

   assign const_lambda_2_start_chain[0] = const_lambda_2_start;
   assign const_lambda_2_finish_chain[0] = 1'b1;
   assign const_lambda_2_csr_pending_write = |const_lambda_2_pending_write;
   assign const_lambda_2_csr_lsu_active = |const_lambda_2_lsu_active;
   assign const_lambda_2_csr_valid_in = |const_lambda_2_valid_in;
   assign const_lambda_2_stall_in = 0;
   // INST const_lambda_2_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_2_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_2_start),
      .num_groups(const_lambda_2_num_groups),
      .local_size(const_lambda_2_local_size),
      .stall_in(const_lambda_2_wg_disp_stall_in),
      .stall_in_lookahead(const_lambda_2_wg_disp_stall_in_lookahead),
      .valid_out(const_lambda_2_wg_disp_valid_out),
      .group_id_out(const_lambda_2_wg_disp_group_id_out),
      .global_id_base_out(const_lambda_2_wg_disp_global_id_base_out),
      .start_out(const_lambda_2_wg_disp_start_out),
      .dispatched_all_groups(const_lambda_2_wg_disp_dispatched_all_groups)
   );

   // INST const_lambda_2_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(16),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_2_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_2_start),
      .wg_size(const_lambda_2_wg_size),
      .wg_dispatch_valid_out(const_lambda_2_wg_disp_valid_out),
      .wg_dispatch_stall_in(const_lambda_2_wg_disp_stall_in),
      .dispatched_all_groups(const_lambda_2_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(const_lambda_2_valid_out),
      .kernel_copy_stall_in(const_lambda_2_stall_in),
      .pending_writes(const_lambda_2_csr_pending_write),
      .finish(const_lambda_2_finish_sig)
   );

   // INST const_lambda_2_csr_agent_inst of const_lambda_2_function_cra_agent
   const_lambda_2_function_cra_agent const_lambda_2_csr_agent_inst
   (
      .clock(clock),
      .resetn(const_lambda_2_resetn_delayed),
      .kernel_start(const_lambda_2_start),
      .kernel_done(const_lambda_2_finish_sig),
      .global_offset_0(const_lambda_2_global_offset[0]),
      .global_offset_1(const_lambda_2_global_offset[1]),
      .global_offset_2(const_lambda_2_global_offset[2]),
      .work_dim(const_lambda_2_work_dim),
      .has_a_lsu_active(const_lambda_2_csr_lsu_active),
      .has_a_write_pending(const_lambda_2_csr_pending_write),
      .valid_in(const_lambda_2_csr_valid_in),
      .global_size_0(const_lambda_2_global_size[0]),
      .global_size_1(const_lambda_2_global_size[1]),
      .global_size_2(const_lambda_2_global_size[2]),
      .num_groups_0(const_lambda_2_num_groups[0]),
      .num_groups_1(const_lambda_2_num_groups[1]),
      .num_groups_2(const_lambda_2_num_groups[2]),
      .local_size_0(const_lambda_2_local_size[0]),
      .local_size_1(const_lambda_2_local_size[1]),
      .local_size_2(const_lambda_2_local_size[2]),
      .workgroup_size(const_lambda_2_wg_size),
      .kernel_arguments(const_lambda_2_kernel_arguments),
      .cra_irq(cra_irq_const_lambda_2),
      // AVS avs_cra
      .avs_cra_enable(avs_const_lambda_2_cra_enable),
      .avs_cra_read(avs_const_lambda_2_cra_read),
      .avs_cra_write(avs_const_lambda_2_cra_write),
      .avs_cra_address(avs_const_lambda_2_cra_address),
      .avs_cra_writedata(avs_const_lambda_2_cra_writedata),
      .avs_cra_byteenable(avs_const_lambda_2_cra_byteenable),
      .avs_cra_readdata(avs_const_lambda_2_cra_readdata),
      .avs_cra_readdatavalid(avs_const_lambda_2_cra_readdatavalid)
   );

   // INST const_lambda_2_csr_agent_reset_delay_inst of acl_reset_handler
   acl_reset_handler
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_ACLRN(1),
      .USE_SYNCHRONIZER(1),
      .PULSE_EXTENSION(0),
      .PIPE_DEPTH(10),
      .NUM_COPIES(1)
   )
   const_lambda_2_csr_agent_reset_delay_inst
   (
      .clk(clock),
      .i_resetn(resetn),
      .o_aclrn(),
      .o_sclrn(const_lambda_2_resetn_delayed),
      .o_resetn_synchronized()
   );

   // INST const_lambda_2_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(9),
      .LOCAL_WIDTH_Y(9),
      .LOCAL_WIDTH_Z(9),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   const_lambda_2_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_2_wg_disp_start_out),
      .valid_in(const_lambda_2_wg_disp_valid_out[0]),
      .stall_out(const_lambda_2_wg_disp_stall_in[0]),
      .stall_out_lookahead(const_lambda_2_wg_disp_stall_in_lookahead[0]),
      .stall_in(const_lambda_2_stall_out[0]),
      .valid_out(const_lambda_2_valid_in[0]),
      .group_id_in(const_lambda_2_wg_disp_group_id_out),
      .global_id_base_in(const_lambda_2_wg_disp_global_id_base_out),
      .local_size(const_lambda_2_local_size),
      .global_size(const_lambda_2_global_size),
      .global_work_offset(const_lambda_2_global_offset),
      .local_id(const_lambda_2_local_id[0]),
      .global_id(const_lambda_2_global_id[0]),
      .group_id(const_lambda_2_group_id[0])
   );

   // INST const_lambda_2_inst_0 of const_lambda_2_top_wrapper_0
   const_lambda_2_top_wrapper_0 const_lambda_2_inst_0
   (
      .start(const_lambda_2_start_kernel_copy[0]),
      .kernel_arguments(const_lambda_2_kernel_arguments),
      .work_dim(const_lambda_2_work_dim),
      .global_offset(const_lambda_2_global_offset),
      .kernel_valid_out(const_lambda_2_valid_out[0]),
      .has_a_write_pending(const_lambda_2_pending_write[0]),
      .has_a_lsu_active(const_lambda_2_lsu_active[0]),
      .global_id(const_lambda_2_global_id[0]),
      .local_id(const_lambda_2_local_id[0]),
      .group_id(const_lambda_2_group_id[0]),
      .global_size(const_lambda_2_global_size),
      .local_size(const_lambda_2_local_size),
      .num_groups(const_lambda_2_num_groups),
      .workgroup_size(const_lambda_2_wg_size),
      .kernel_stall_out(const_lambda_2_stall_out[0]),
      .kernel_valid_in(const_lambda_2_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm16_const_lambda_2
      .avm_lm16_const_lambda_2_enable(const_lambda_2_0_avm_lm16_const_lambda_2_enable),
      .avm_lm16_const_lambda_2_read(const_lambda_2_0_avm_lm16_const_lambda_2_read),
      .avm_lm16_const_lambda_2_write(const_lambda_2_0_avm_lm16_const_lambda_2_write),
      .avm_lm16_const_lambda_2_address(const_lambda_2_0_avm_lm16_const_lambda_2_address),
      .avm_lm16_const_lambda_2_writedata(const_lambda_2_0_avm_lm16_const_lambda_2_writedata),
      .avm_lm16_const_lambda_2_byteenable(const_lambda_2_0_avm_lm16_const_lambda_2_byteenable),
      .avm_lm16_const_lambda_2_waitrequest(const_lambda_2_0_avm_lm16_const_lambda_2_waitrequest),
      .avm_lm16_const_lambda_2_readdata(const_lambda_2_0_avm_lm16_const_lambda_2_readdata),
      .avm_lm16_const_lambda_2_readdatavalid(const_lambda_2_0_avm_lm16_const_lambda_2_readdatavalid),
      .avm_lm16_const_lambda_2_burstcount(const_lambda_2_0_avm_lm16_const_lambda_2_burstcount),
      .avm_lm16_const_lambda_2_writeack(const_lambda_2_0_avm_lm16_const_lambda_2_writeack),
      // AVM avm_lm18_const_lambda_2
      .avm_lm18_const_lambda_2_enable(const_lambda_2_0_avm_lm18_const_lambda_2_enable),
      .avm_lm18_const_lambda_2_read(const_lambda_2_0_avm_lm18_const_lambda_2_read),
      .avm_lm18_const_lambda_2_write(const_lambda_2_0_avm_lm18_const_lambda_2_write),
      .avm_lm18_const_lambda_2_address(const_lambda_2_0_avm_lm18_const_lambda_2_address),
      .avm_lm18_const_lambda_2_writedata(const_lambda_2_0_avm_lm18_const_lambda_2_writedata),
      .avm_lm18_const_lambda_2_byteenable(const_lambda_2_0_avm_lm18_const_lambda_2_byteenable),
      .avm_lm18_const_lambda_2_waitrequest(const_lambda_2_0_avm_lm18_const_lambda_2_waitrequest),
      .avm_lm18_const_lambda_2_readdata(const_lambda_2_0_avm_lm18_const_lambda_2_readdata),
      .avm_lm18_const_lambda_2_readdatavalid(const_lambda_2_0_avm_lm18_const_lambda_2_readdatavalid),
      .avm_lm18_const_lambda_2_burstcount(const_lambda_2_0_avm_lm18_const_lambda_2_burstcount),
      .avm_lm18_const_lambda_2_writeack(const_lambda_2_0_avm_lm18_const_lambda_2_writeack),
      // AVM avm_lm9_const_lambda_2
      .avm_lm9_const_lambda_2_enable(const_lambda_2_0_avm_lm9_const_lambda_2_enable),
      .avm_lm9_const_lambda_2_read(const_lambda_2_0_avm_lm9_const_lambda_2_read),
      .avm_lm9_const_lambda_2_write(const_lambda_2_0_avm_lm9_const_lambda_2_write),
      .avm_lm9_const_lambda_2_address(const_lambda_2_0_avm_lm9_const_lambda_2_address),
      .avm_lm9_const_lambda_2_writedata(const_lambda_2_0_avm_lm9_const_lambda_2_writedata),
      .avm_lm9_const_lambda_2_byteenable(const_lambda_2_0_avm_lm9_const_lambda_2_byteenable),
      .avm_lm9_const_lambda_2_waitrequest(const_lambda_2_0_avm_lm9_const_lambda_2_waitrequest),
      .avm_lm9_const_lambda_2_readdata(const_lambda_2_0_avm_lm9_const_lambda_2_readdata),
      .avm_lm9_const_lambda_2_readdatavalid(const_lambda_2_0_avm_lm9_const_lambda_2_readdatavalid),
      .avm_lm9_const_lambda_2_burstcount(const_lambda_2_0_avm_lm9_const_lambda_2_burstcount),
      .avm_lm9_const_lambda_2_writeack(const_lambda_2_0_avm_lm9_const_lambda_2_writeack),
      // AVM avm_memdep_4_const_lambda_2
      .avm_memdep_4_const_lambda_2_enable(const_lambda_2_0_avm_memdep_4_const_lambda_2_enable),
      .avm_memdep_4_const_lambda_2_read(const_lambda_2_0_avm_memdep_4_const_lambda_2_read),
      .avm_memdep_4_const_lambda_2_write(const_lambda_2_0_avm_memdep_4_const_lambda_2_write),
      .avm_memdep_4_const_lambda_2_address(const_lambda_2_0_avm_memdep_4_const_lambda_2_address),
      .avm_memdep_4_const_lambda_2_writedata(const_lambda_2_0_avm_memdep_4_const_lambda_2_writedata),
      .avm_memdep_4_const_lambda_2_byteenable(const_lambda_2_0_avm_memdep_4_const_lambda_2_byteenable),
      .avm_memdep_4_const_lambda_2_waitrequest(const_lambda_2_0_avm_memdep_4_const_lambda_2_waitrequest),
      .avm_memdep_4_const_lambda_2_readdata(const_lambda_2_0_avm_memdep_4_const_lambda_2_readdata),
      .avm_memdep_4_const_lambda_2_readdatavalid(const_lambda_2_0_avm_memdep_4_const_lambda_2_readdatavalid),
      .avm_memdep_4_const_lambda_2_burstcount(const_lambda_2_0_avm_memdep_4_const_lambda_2_burstcount),
      .avm_memdep_4_const_lambda_2_writeack(const_lambda_2_0_avm_memdep_4_const_lambda_2_writeack),
      // AVM avm_memdep_5_const_lambda_2
      .avm_memdep_5_const_lambda_2_enable(const_lambda_2_0_avm_memdep_5_const_lambda_2_enable),
      .avm_memdep_5_const_lambda_2_read(const_lambda_2_0_avm_memdep_5_const_lambda_2_read),
      .avm_memdep_5_const_lambda_2_write(const_lambda_2_0_avm_memdep_5_const_lambda_2_write),
      .avm_memdep_5_const_lambda_2_address(const_lambda_2_0_avm_memdep_5_const_lambda_2_address),
      .avm_memdep_5_const_lambda_2_writedata(const_lambda_2_0_avm_memdep_5_const_lambda_2_writedata),
      .avm_memdep_5_const_lambda_2_byteenable(const_lambda_2_0_avm_memdep_5_const_lambda_2_byteenable),
      .avm_memdep_5_const_lambda_2_waitrequest(const_lambda_2_0_avm_memdep_5_const_lambda_2_waitrequest),
      .avm_memdep_5_const_lambda_2_readdata(const_lambda_2_0_avm_memdep_5_const_lambda_2_readdata),
      .avm_memdep_5_const_lambda_2_readdatavalid(const_lambda_2_0_avm_memdep_5_const_lambda_2_readdatavalid),
      .avm_memdep_5_const_lambda_2_burstcount(const_lambda_2_0_avm_memdep_5_const_lambda_2_burstcount),
      .avm_memdep_5_const_lambda_2_writeack(const_lambda_2_0_avm_memdep_5_const_lambda_2_writeack),
      // AVM avm_unnamed_const_lambda_23_const_lambda_2
      .avm_unnamed_const_lambda_23_const_lambda_2_enable(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_enable),
      .avm_unnamed_const_lambda_23_const_lambda_2_read(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_read),
      .avm_unnamed_const_lambda_23_const_lambda_2_write(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_write),
      .avm_unnamed_const_lambda_23_const_lambda_2_address(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_address),
      .avm_unnamed_const_lambda_23_const_lambda_2_writedata(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_writedata),
      .avm_unnamed_const_lambda_23_const_lambda_2_byteenable(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_byteenable),
      .avm_unnamed_const_lambda_23_const_lambda_2_waitrequest(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_waitrequest),
      .avm_unnamed_const_lambda_23_const_lambda_2_readdata(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_readdata),
      .avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid),
      .avm_unnamed_const_lambda_23_const_lambda_2_burstcount(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_burstcount),
      .avm_unnamed_const_lambda_23_const_lambda_2_writeack(const_lambda_2_0_avm_unnamed_const_lambda_23_const_lambda_2_writeack),
      .lmem_invalid_single_bit(lmem_invalid_single_bit_0),
      // AVM avm_lm22189_const_lambda_2
      .avm_lm22189_const_lambda_2_enable(avm_lm22189_const_lambda_2_64_0_enable),
      .avm_lm22189_const_lambda_2_read(avm_lm22189_const_lambda_2_64_0_read),
      .avm_lm22189_const_lambda_2_write(avm_lm22189_const_lambda_2_64_0_write),
      .avm_lm22189_const_lambda_2_address(avm_lm22189_const_lambda_2_64_0_address),
      .avm_lm22189_const_lambda_2_writedata(avm_lm22189_const_lambda_2_64_0_writedata),
      .avm_lm22189_const_lambda_2_byteenable(avm_lm22189_const_lambda_2_64_0_byteenable),
      .avm_lm22189_const_lambda_2_waitrequest(avm_lm22189_const_lambda_2_64_0_waitrequest),
      .avm_lm22189_const_lambda_2_readdata(avm_lm22189_const_lambda_2_64_0_readdata),
      .avm_lm22189_const_lambda_2_readdatavalid(avm_lm22189_const_lambda_2_64_0_readdatavalid),
      .avm_lm22189_const_lambda_2_burstcount(avm_lm22189_const_lambda_2_64_0_burstcount),
      .avm_lm22189_const_lambda_2_writeack(avm_lm22189_const_lambda_2_64_0_writeack),
      // AVM avm_memdep_388_const_lambda_2
      .avm_memdep_388_const_lambda_2_enable(avm_memdep_388_const_lambda_2_64_0_enable),
      .avm_memdep_388_const_lambda_2_read(avm_memdep_388_const_lambda_2_64_0_read),
      .avm_memdep_388_const_lambda_2_write(avm_memdep_388_const_lambda_2_64_0_write),
      .avm_memdep_388_const_lambda_2_address(avm_memdep_388_const_lambda_2_64_0_address),
      .avm_memdep_388_const_lambda_2_writedata(avm_memdep_388_const_lambda_2_64_0_writedata),
      .avm_memdep_388_const_lambda_2_byteenable(avm_memdep_388_const_lambda_2_64_0_byteenable),
      .avm_memdep_388_const_lambda_2_waitrequest(avm_memdep_388_const_lambda_2_64_0_waitrequest),
      .avm_memdep_388_const_lambda_2_readdata(avm_memdep_388_const_lambda_2_64_0_readdata),
      .avm_memdep_388_const_lambda_2_readdatavalid(avm_memdep_388_const_lambda_2_64_0_readdatavalid),
      .avm_memdep_388_const_lambda_2_burstcount(avm_memdep_388_const_lambda_2_64_0_burstcount),
      .avm_memdep_388_const_lambda_2_writeack(avm_memdep_388_const_lambda_2_64_0_writeack),
      // AVM avm_lm287_const_lambda_2
      .avm_lm287_const_lambda_2_enable(avm_lm287_const_lambda_2_65_0_enable),
      .avm_lm287_const_lambda_2_read(avm_lm287_const_lambda_2_65_0_read),
      .avm_lm287_const_lambda_2_write(avm_lm287_const_lambda_2_65_0_write),
      .avm_lm287_const_lambda_2_address(avm_lm287_const_lambda_2_65_0_address),
      .avm_lm287_const_lambda_2_writedata(avm_lm287_const_lambda_2_65_0_writedata),
      .avm_lm287_const_lambda_2_byteenable(avm_lm287_const_lambda_2_65_0_byteenable),
      .avm_lm287_const_lambda_2_waitrequest(avm_lm287_const_lambda_2_65_0_waitrequest),
      .avm_lm287_const_lambda_2_readdata(avm_lm287_const_lambda_2_65_0_readdata),
      .avm_lm287_const_lambda_2_readdatavalid(avm_lm287_const_lambda_2_65_0_readdatavalid),
      .avm_lm287_const_lambda_2_burstcount(avm_lm287_const_lambda_2_65_0_burstcount),
      .avm_lm287_const_lambda_2_writeack(avm_lm287_const_lambda_2_65_0_writeack),
      // AVM avm_memdep_86_const_lambda_2
      .avm_memdep_86_const_lambda_2_enable(avm_memdep_86_const_lambda_2_65_0_enable),
      .avm_memdep_86_const_lambda_2_read(avm_memdep_86_const_lambda_2_65_0_read),
      .avm_memdep_86_const_lambda_2_write(avm_memdep_86_const_lambda_2_65_0_write),
      .avm_memdep_86_const_lambda_2_address(avm_memdep_86_const_lambda_2_65_0_address),
      .avm_memdep_86_const_lambda_2_writedata(avm_memdep_86_const_lambda_2_65_0_writedata),
      .avm_memdep_86_const_lambda_2_byteenable(avm_memdep_86_const_lambda_2_65_0_byteenable),
      .avm_memdep_86_const_lambda_2_waitrequest(avm_memdep_86_const_lambda_2_65_0_waitrequest),
      .avm_memdep_86_const_lambda_2_readdata(avm_memdep_86_const_lambda_2_65_0_readdata),
      .avm_memdep_86_const_lambda_2_readdatavalid(avm_memdep_86_const_lambda_2_65_0_readdatavalid),
      .avm_memdep_86_const_lambda_2_burstcount(avm_memdep_86_const_lambda_2_65_0_burstcount),
      .avm_memdep_86_const_lambda_2_writeack(avm_memdep_86_const_lambda_2_65_0_writeack)
   );

   // INST const_lambda_2_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1)
   )
   const_lambda_2_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(const_lambda_2_start_chain[0]),
      .start_kernel(const_lambda_2_start_kernel_copy[0]),
      .start_finish_detector(const_lambda_2_start_task_fd[0]),
      .start_finish_chain_element(const_lambda_2_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module const_lambda_std_ic_partition_wrapper
(
   input logic clock,
   input logic resetn,
   output logic cra_irq_const_lambda,
   // AVS avs_const_lambda_cra
   input logic avs_const_lambda_cra_enable,
   input logic avs_const_lambda_cra_read,
   input logic avs_const_lambda_cra_write,
   input logic [4:0] avs_const_lambda_cra_address,
   input logic [63:0] avs_const_lambda_cra_writedata,
   input logic [7:0] avs_const_lambda_cra_byteenable,
   output logic [63:0] avs_const_lambda_cra_readdata,
   output logic avs_const_lambda_cra_readdatavalid,
   // AVM const_lambda_0_avm_lm3_const_lambda
   output logic const_lambda_0_avm_lm3_const_lambda_enable,
   output logic const_lambda_0_avm_lm3_const_lambda_read,
   output logic const_lambda_0_avm_lm3_const_lambda_write,
   output logic [34:0] const_lambda_0_avm_lm3_const_lambda_address,
   output logic [63:0] const_lambda_0_avm_lm3_const_lambda_writedata,
   output logic [7:0] const_lambda_0_avm_lm3_const_lambda_byteenable,
   input logic const_lambda_0_avm_lm3_const_lambda_waitrequest,
   input logic [63:0] const_lambda_0_avm_lm3_const_lambda_readdata,
   input logic const_lambda_0_avm_lm3_const_lambda_readdatavalid,
   output logic const_lambda_0_avm_lm3_const_lambda_burstcount,
   input logic const_lambda_0_avm_lm3_const_lambda_writeack,
   // AVM const_lambda_0_avm_lm_const_lambda
   output logic const_lambda_0_avm_lm_const_lambda_enable,
   output logic const_lambda_0_avm_lm_const_lambda_read,
   output logic const_lambda_0_avm_lm_const_lambda_write,
   output logic [34:0] const_lambda_0_avm_lm_const_lambda_address,
   output logic [63:0] const_lambda_0_avm_lm_const_lambda_writedata,
   output logic [7:0] const_lambda_0_avm_lm_const_lambda_byteenable,
   input logic const_lambda_0_avm_lm_const_lambda_waitrequest,
   input logic [63:0] const_lambda_0_avm_lm_const_lambda_readdata,
   input logic const_lambda_0_avm_lm_const_lambda_readdatavalid,
   output logic const_lambda_0_avm_lm_const_lambda_burstcount,
   input logic const_lambda_0_avm_lm_const_lambda_writeack,
   // AVM const_lambda_0_avm_unnamed_const_lambda2_const_lambda
   output logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_enable,
   output logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_read,
   output logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_write,
   output logic [34:0] const_lambda_0_avm_unnamed_const_lambda2_const_lambda_address,
   output logic [63:0] const_lambda_0_avm_unnamed_const_lambda2_const_lambda_writedata,
   output logic [7:0] const_lambda_0_avm_unnamed_const_lambda2_const_lambda_byteenable,
   input logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_waitrequest,
   input logic [63:0] const_lambda_0_avm_unnamed_const_lambda2_const_lambda_readdata,
   input logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_readdatavalid,
   output logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_burstcount,
   input logic const_lambda_0_avm_unnamed_const_lambda2_const_lambda_writeack
);
   logic const_lambda_start;
   logic [0:0] const_lambda_start_chain;
   logic [0:0] const_lambda_start_kernel_copy;
   logic [0:0] const_lambda_start_task_fd;
   logic [0:0] const_lambda_start_finish_element;
   logic const_lambda_finish_sig;
   logic [0:0] const_lambda_finish_kernel_copy;
   logic [0:0] const_lambda_finish_chain;
   logic [63:0] const_lambda_global_size [2:0];
   logic [31:0] const_lambda_num_groups [2:0];
   logic [31:0] const_lambda_local_size [2:0];
   logic [63:0] const_lambda_global_offset [2:0];
   logic [31:0] const_lambda_work_dim;
   logic [31:0] const_lambda_wg_size;
   logic [0:0] const_lambda_wg_disp_stall_in;
   logic [0:0] const_lambda_wg_disp_stall_in_lookahead;
   logic [0:0] const_lambda_wg_disp_valid_out;
   logic const_lambda_wg_disp_start_out;
   logic [31:0] const_lambda_wg_disp_group_id_out [2:0];
   logic [31:0] const_lambda_wg_disp_global_id_base_out [2:0];
   logic const_lambda_wg_disp_dispatched_all_groups;
   logic [63:0] const_lambda_global_id [1][2:0];
   logic [31:0] const_lambda_local_id [1][2:0];
   logic [31:0] const_lambda_group_id [1][2:0];
   logic [0:0] const_lambda_pending_write;
   logic [0:0] const_lambda_lsu_active;
   logic [0:0] const_lambda_valid_in;
   logic [0:0] const_lambda_valid_out;
   logic [0:0] const_lambda_stall_in;
   logic [0:0] const_lambda_stall_out;
   logic const_lambda_csr_pending_write;
   logic const_lambda_csr_lsu_active;
   logic const_lambda_csr_valid_in;
   logic const_lambda_resetn_delayed;
   logic [511:0] const_lambda_kernel_arguments;

   assign const_lambda_start_chain[0] = const_lambda_start;
   assign const_lambda_finish_chain[0] = 1'b1;
   assign const_lambda_csr_pending_write = |const_lambda_pending_write;
   assign const_lambda_csr_lsu_active = |const_lambda_lsu_active;
   assign const_lambda_csr_valid_in = |const_lambda_valid_in;
   assign const_lambda_stall_in = 0;
   // INST const_lambda_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_start),
      .num_groups(const_lambda_num_groups),
      .local_size(const_lambda_local_size),
      .stall_in(const_lambda_wg_disp_stall_in),
      .stall_in_lookahead(const_lambda_wg_disp_stall_in_lookahead),
      .valid_out(const_lambda_wg_disp_valid_out),
      .group_id_out(const_lambda_wg_disp_group_id_out),
      .global_id_base_out(const_lambda_wg_disp_global_id_base_out),
      .start_out(const_lambda_wg_disp_start_out),
      .dispatched_all_groups(const_lambda_wg_disp_dispatched_all_groups)
   );

   // INST const_lambda_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(16),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_start),
      .wg_size(const_lambda_wg_size),
      .wg_dispatch_valid_out(const_lambda_wg_disp_valid_out),
      .wg_dispatch_stall_in(const_lambda_wg_disp_stall_in),
      .dispatched_all_groups(const_lambda_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(const_lambda_valid_out),
      .kernel_copy_stall_in(const_lambda_stall_in),
      .pending_writes(const_lambda_csr_pending_write),
      .finish(const_lambda_finish_sig)
   );

   // INST const_lambda_csr_agent_inst of const_lambda_function_cra_agent
   const_lambda_function_cra_agent const_lambda_csr_agent_inst
   (
      .clock(clock),
      .resetn(const_lambda_resetn_delayed),
      .kernel_start(const_lambda_start),
      .kernel_done(const_lambda_finish_sig),
      .global_offset_0(const_lambda_global_offset[0]),
      .global_offset_1(const_lambda_global_offset[1]),
      .global_offset_2(const_lambda_global_offset[2]),
      .work_dim(const_lambda_work_dim),
      .has_a_lsu_active(const_lambda_csr_lsu_active),
      .has_a_write_pending(const_lambda_csr_pending_write),
      .valid_in(const_lambda_csr_valid_in),
      .global_size_0(const_lambda_global_size[0]),
      .global_size_1(const_lambda_global_size[1]),
      .global_size_2(const_lambda_global_size[2]),
      .num_groups_0(const_lambda_num_groups[0]),
      .num_groups_1(const_lambda_num_groups[1]),
      .num_groups_2(const_lambda_num_groups[2]),
      .local_size_0(const_lambda_local_size[0]),
      .local_size_1(const_lambda_local_size[1]),
      .local_size_2(const_lambda_local_size[2]),
      .workgroup_size(const_lambda_wg_size),
      .kernel_arguments(const_lambda_kernel_arguments),
      .cra_irq(cra_irq_const_lambda),
      // AVS avs_cra
      .avs_cra_enable(avs_const_lambda_cra_enable),
      .avs_cra_read(avs_const_lambda_cra_read),
      .avs_cra_write(avs_const_lambda_cra_write),
      .avs_cra_address(avs_const_lambda_cra_address),
      .avs_cra_writedata(avs_const_lambda_cra_writedata),
      .avs_cra_byteenable(avs_const_lambda_cra_byteenable),
      .avs_cra_readdata(avs_const_lambda_cra_readdata),
      .avs_cra_readdatavalid(avs_const_lambda_cra_readdatavalid)
   );

   // INST const_lambda_csr_agent_reset_delay_inst of acl_reset_handler
   acl_reset_handler
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_ACLRN(1),
      .USE_SYNCHRONIZER(1),
      .PULSE_EXTENSION(0),
      .PIPE_DEPTH(10),
      .NUM_COPIES(1)
   )
   const_lambda_csr_agent_reset_delay_inst
   (
      .clk(clock),
      .i_resetn(resetn),
      .o_aclrn(),
      .o_sclrn(const_lambda_resetn_delayed),
      .o_resetn_synchronized()
   );

   // INST const_lambda_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(31),
      .LOCAL_WIDTH_Y(31),
      .LOCAL_WIDTH_Z(31),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   const_lambda_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_wg_disp_start_out),
      .valid_in(const_lambda_wg_disp_valid_out[0]),
      .stall_out(const_lambda_wg_disp_stall_in[0]),
      .stall_out_lookahead(const_lambda_wg_disp_stall_in_lookahead[0]),
      .stall_in(const_lambda_stall_out[0]),
      .valid_out(const_lambda_valid_in[0]),
      .group_id_in(const_lambda_wg_disp_group_id_out),
      .global_id_base_in(const_lambda_wg_disp_global_id_base_out),
      .local_size(const_lambda_local_size),
      .global_size(const_lambda_global_size),
      .global_work_offset(const_lambda_global_offset),
      .local_id(const_lambda_local_id[0]),
      .global_id(const_lambda_global_id[0]),
      .group_id(const_lambda_group_id[0])
   );

   // INST const_lambda_inst_0 of const_lambda_top_wrapper_0
   const_lambda_top_wrapper_0 const_lambda_inst_0
   (
      .start(const_lambda_start_kernel_copy[0]),
      .kernel_arguments(const_lambda_kernel_arguments),
      .work_dim(const_lambda_work_dim),
      .global_offset(const_lambda_global_offset),
      .kernel_valid_out(const_lambda_valid_out[0]),
      .has_a_write_pending(const_lambda_pending_write[0]),
      .has_a_lsu_active(const_lambda_lsu_active[0]),
      .global_id(const_lambda_global_id[0]),
      .local_id(const_lambda_local_id[0]),
      .group_id(const_lambda_group_id[0]),
      .global_size(const_lambda_global_size),
      .local_size(const_lambda_local_size),
      .num_groups(const_lambda_num_groups),
      .workgroup_size(const_lambda_wg_size),
      .kernel_stall_out(const_lambda_stall_out[0]),
      .kernel_valid_in(const_lambda_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm3_const_lambda
      .avm_lm3_const_lambda_enable(const_lambda_0_avm_lm3_const_lambda_enable),
      .avm_lm3_const_lambda_read(const_lambda_0_avm_lm3_const_lambda_read),
      .avm_lm3_const_lambda_write(const_lambda_0_avm_lm3_const_lambda_write),
      .avm_lm3_const_lambda_address(const_lambda_0_avm_lm3_const_lambda_address),
      .avm_lm3_const_lambda_writedata(const_lambda_0_avm_lm3_const_lambda_writedata),
      .avm_lm3_const_lambda_byteenable(const_lambda_0_avm_lm3_const_lambda_byteenable),
      .avm_lm3_const_lambda_waitrequest(const_lambda_0_avm_lm3_const_lambda_waitrequest),
      .avm_lm3_const_lambda_readdata(const_lambda_0_avm_lm3_const_lambda_readdata),
      .avm_lm3_const_lambda_readdatavalid(const_lambda_0_avm_lm3_const_lambda_readdatavalid),
      .avm_lm3_const_lambda_burstcount(const_lambda_0_avm_lm3_const_lambda_burstcount),
      .avm_lm3_const_lambda_writeack(const_lambda_0_avm_lm3_const_lambda_writeack),
      // AVM avm_lm_const_lambda
      .avm_lm_const_lambda_enable(const_lambda_0_avm_lm_const_lambda_enable),
      .avm_lm_const_lambda_read(const_lambda_0_avm_lm_const_lambda_read),
      .avm_lm_const_lambda_write(const_lambda_0_avm_lm_const_lambda_write),
      .avm_lm_const_lambda_address(const_lambda_0_avm_lm_const_lambda_address),
      .avm_lm_const_lambda_writedata(const_lambda_0_avm_lm_const_lambda_writedata),
      .avm_lm_const_lambda_byteenable(const_lambda_0_avm_lm_const_lambda_byteenable),
      .avm_lm_const_lambda_waitrequest(const_lambda_0_avm_lm_const_lambda_waitrequest),
      .avm_lm_const_lambda_readdata(const_lambda_0_avm_lm_const_lambda_readdata),
      .avm_lm_const_lambda_readdatavalid(const_lambda_0_avm_lm_const_lambda_readdatavalid),
      .avm_lm_const_lambda_burstcount(const_lambda_0_avm_lm_const_lambda_burstcount),
      .avm_lm_const_lambda_writeack(const_lambda_0_avm_lm_const_lambda_writeack),
      // AVM avm_unnamed_const_lambda2_const_lambda
      .avm_unnamed_const_lambda2_const_lambda_enable(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_enable),
      .avm_unnamed_const_lambda2_const_lambda_read(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_read),
      .avm_unnamed_const_lambda2_const_lambda_write(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_write),
      .avm_unnamed_const_lambda2_const_lambda_address(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_address),
      .avm_unnamed_const_lambda2_const_lambda_writedata(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_writedata),
      .avm_unnamed_const_lambda2_const_lambda_byteenable(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_byteenable),
      .avm_unnamed_const_lambda2_const_lambda_waitrequest(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_waitrequest),
      .avm_unnamed_const_lambda2_const_lambda_readdata(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_readdata),
      .avm_unnamed_const_lambda2_const_lambda_readdatavalid(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_readdatavalid),
      .avm_unnamed_const_lambda2_const_lambda_burstcount(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_burstcount),
      .avm_unnamed_const_lambda2_const_lambda_writeack(const_lambda_0_avm_unnamed_const_lambda2_const_lambda_writeack)
   );

   // INST const_lambda_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1)
   )
   const_lambda_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(const_lambda_start_chain[0]),
      .start_kernel(const_lambda_start_kernel_copy[0]),
      .start_finish_detector(const_lambda_start_task_fd[0]),
      .start_finish_chain_element(const_lambda_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_1_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module const_lambda_1_std_ic_partition_wrapper
(
   input logic clock,
   input logic resetn,
   output logic cra_irq_const_lambda_1,
   // AVS avs_const_lambda_1_cra
   input logic avs_const_lambda_1_cra_enable,
   input logic avs_const_lambda_1_cra_read,
   input logic avs_const_lambda_1_cra_write,
   input logic [4:0] avs_const_lambda_1_cra_address,
   input logic [63:0] avs_const_lambda_1_cra_writedata,
   input logic [7:0] avs_const_lambda_1_cra_byteenable,
   output logic [63:0] avs_const_lambda_1_cra_readdata,
   output logic avs_const_lambda_1_cra_readdatavalid,
   // AVM const_lambda_1_0_avm_lm4_const_lambda_1
   output logic const_lambda_1_0_avm_lm4_const_lambda_1_enable,
   output logic const_lambda_1_0_avm_lm4_const_lambda_1_read,
   output logic const_lambda_1_0_avm_lm4_const_lambda_1_write,
   output logic [34:0] const_lambda_1_0_avm_lm4_const_lambda_1_address,
   output logic [63:0] const_lambda_1_0_avm_lm4_const_lambda_1_writedata,
   output logic [7:0] const_lambda_1_0_avm_lm4_const_lambda_1_byteenable,
   input logic const_lambda_1_0_avm_lm4_const_lambda_1_waitrequest,
   input logic [63:0] const_lambda_1_0_avm_lm4_const_lambda_1_readdata,
   input logic const_lambda_1_0_avm_lm4_const_lambda_1_readdatavalid,
   output logic const_lambda_1_0_avm_lm4_const_lambda_1_burstcount,
   input logic const_lambda_1_0_avm_lm4_const_lambda_1_writeack,
   // AVM const_lambda_1_0_avm_lm_const_lambda_1
   output logic const_lambda_1_0_avm_lm_const_lambda_1_enable,
   output logic const_lambda_1_0_avm_lm_const_lambda_1_read,
   output logic const_lambda_1_0_avm_lm_const_lambda_1_write,
   output logic [34:0] const_lambda_1_0_avm_lm_const_lambda_1_address,
   output logic [63:0] const_lambda_1_0_avm_lm_const_lambda_1_writedata,
   output logic [7:0] const_lambda_1_0_avm_lm_const_lambda_1_byteenable,
   input logic const_lambda_1_0_avm_lm_const_lambda_1_waitrequest,
   input logic [63:0] const_lambda_1_0_avm_lm_const_lambda_1_readdata,
   input logic const_lambda_1_0_avm_lm_const_lambda_1_readdatavalid,
   output logic const_lambda_1_0_avm_lm_const_lambda_1_burstcount,
   input logic const_lambda_1_0_avm_lm_const_lambda_1_writeack,
   // AVM const_lambda_1_0_avm_memdep_const_lambda_1
   output logic const_lambda_1_0_avm_memdep_const_lambda_1_enable,
   output logic const_lambda_1_0_avm_memdep_const_lambda_1_read,
   output logic const_lambda_1_0_avm_memdep_const_lambda_1_write,
   output logic [34:0] const_lambda_1_0_avm_memdep_const_lambda_1_address,
   output logic [63:0] const_lambda_1_0_avm_memdep_const_lambda_1_writedata,
   output logic [7:0] const_lambda_1_0_avm_memdep_const_lambda_1_byteenable,
   input logic const_lambda_1_0_avm_memdep_const_lambda_1_waitrequest,
   input logic [63:0] const_lambda_1_0_avm_memdep_const_lambda_1_readdata,
   input logic const_lambda_1_0_avm_memdep_const_lambda_1_readdatavalid,
   output logic const_lambda_1_0_avm_memdep_const_lambda_1_burstcount,
   input logic const_lambda_1_0_avm_memdep_const_lambda_1_writeack,
   // AVM const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1
   output logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_enable,
   output logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_read,
   output logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_write,
   output logic [34:0] const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_address,
   output logic [63:0] const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_writedata,
   output logic [7:0] const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_byteenable,
   input logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_waitrequest,
   input logic [63:0] const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_readdata,
   input logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid,
   output logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_burstcount,
   input logic const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_writeack
);
   logic const_lambda_1_start;
   logic [0:0] const_lambda_1_start_chain;
   logic [0:0] const_lambda_1_start_kernel_copy;
   logic [0:0] const_lambda_1_start_task_fd;
   logic [0:0] const_lambda_1_start_finish_element;
   logic const_lambda_1_finish_sig;
   logic [0:0] const_lambda_1_finish_kernel_copy;
   logic [0:0] const_lambda_1_finish_chain;
   logic [63:0] const_lambda_1_global_size [2:0];
   logic [31:0] const_lambda_1_num_groups [2:0];
   logic [31:0] const_lambda_1_local_size [2:0];
   logic [63:0] const_lambda_1_global_offset [2:0];
   logic [31:0] const_lambda_1_work_dim;
   logic [31:0] const_lambda_1_wg_size;
   logic [0:0] const_lambda_1_wg_disp_stall_in;
   logic [0:0] const_lambda_1_wg_disp_stall_in_lookahead;
   logic [0:0] const_lambda_1_wg_disp_valid_out;
   logic const_lambda_1_wg_disp_start_out;
   logic [31:0] const_lambda_1_wg_disp_group_id_out [2:0];
   logic [31:0] const_lambda_1_wg_disp_global_id_base_out [2:0];
   logic const_lambda_1_wg_disp_dispatched_all_groups;
   logic [63:0] const_lambda_1_global_id [1][2:0];
   logic [31:0] const_lambda_1_local_id [1][2:0];
   logic [31:0] const_lambda_1_group_id [1][2:0];
   logic [0:0] const_lambda_1_pending_write;
   logic [0:0] const_lambda_1_lsu_active;
   logic [0:0] const_lambda_1_valid_in;
   logic [0:0] const_lambda_1_valid_out;
   logic [0:0] const_lambda_1_stall_in;
   logic [0:0] const_lambda_1_stall_out;
   logic const_lambda_1_csr_pending_write;
   logic const_lambda_1_csr_lsu_active;
   logic const_lambda_1_csr_valid_in;
   logic const_lambda_1_resetn_delayed;
   logic [959:0] const_lambda_1_kernel_arguments;

   assign const_lambda_1_start_chain[0] = const_lambda_1_start;
   assign const_lambda_1_finish_chain[0] = 1'b1;
   assign const_lambda_1_csr_pending_write = |const_lambda_1_pending_write;
   assign const_lambda_1_csr_lsu_active = |const_lambda_1_lsu_active;
   assign const_lambda_1_csr_valid_in = |const_lambda_1_valid_in;
   assign const_lambda_1_stall_in = 0;
   // INST const_lambda_1_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_1_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_1_start),
      .num_groups(const_lambda_1_num_groups),
      .local_size(const_lambda_1_local_size),
      .stall_in(const_lambda_1_wg_disp_stall_in),
      .stall_in_lookahead(const_lambda_1_wg_disp_stall_in_lookahead),
      .valid_out(const_lambda_1_wg_disp_valid_out),
      .group_id_out(const_lambda_1_wg_disp_group_id_out),
      .global_id_base_out(const_lambda_1_wg_disp_global_id_base_out),
      .start_out(const_lambda_1_wg_disp_start_out),
      .dispatched_all_groups(const_lambda_1_wg_disp_dispatched_all_groups)
   );

   // INST const_lambda_1_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(16),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_1_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_1_start),
      .wg_size(const_lambda_1_wg_size),
      .wg_dispatch_valid_out(const_lambda_1_wg_disp_valid_out),
      .wg_dispatch_stall_in(const_lambda_1_wg_disp_stall_in),
      .dispatched_all_groups(const_lambda_1_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(const_lambda_1_valid_out),
      .kernel_copy_stall_in(const_lambda_1_stall_in),
      .pending_writes(const_lambda_1_csr_pending_write),
      .finish(const_lambda_1_finish_sig)
   );

   // INST const_lambda_1_csr_agent_inst of const_lambda_1_function_cra_agent
   const_lambda_1_function_cra_agent const_lambda_1_csr_agent_inst
   (
      .clock(clock),
      .resetn(const_lambda_1_resetn_delayed),
      .kernel_start(const_lambda_1_start),
      .kernel_done(const_lambda_1_finish_sig),
      .global_offset_0(const_lambda_1_global_offset[0]),
      .global_offset_1(const_lambda_1_global_offset[1]),
      .global_offset_2(const_lambda_1_global_offset[2]),
      .work_dim(const_lambda_1_work_dim),
      .has_a_lsu_active(const_lambda_1_csr_lsu_active),
      .has_a_write_pending(const_lambda_1_csr_pending_write),
      .valid_in(const_lambda_1_csr_valid_in),
      .global_size_0(const_lambda_1_global_size[0]),
      .global_size_1(const_lambda_1_global_size[1]),
      .global_size_2(const_lambda_1_global_size[2]),
      .num_groups_0(const_lambda_1_num_groups[0]),
      .num_groups_1(const_lambda_1_num_groups[1]),
      .num_groups_2(const_lambda_1_num_groups[2]),
      .local_size_0(const_lambda_1_local_size[0]),
      .local_size_1(const_lambda_1_local_size[1]),
      .local_size_2(const_lambda_1_local_size[2]),
      .workgroup_size(const_lambda_1_wg_size),
      .kernel_arguments(const_lambda_1_kernel_arguments),
      .cra_irq(cra_irq_const_lambda_1),
      // AVS avs_cra
      .avs_cra_enable(avs_const_lambda_1_cra_enable),
      .avs_cra_read(avs_const_lambda_1_cra_read),
      .avs_cra_write(avs_const_lambda_1_cra_write),
      .avs_cra_address(avs_const_lambda_1_cra_address),
      .avs_cra_writedata(avs_const_lambda_1_cra_writedata),
      .avs_cra_byteenable(avs_const_lambda_1_cra_byteenable),
      .avs_cra_readdata(avs_const_lambda_1_cra_readdata),
      .avs_cra_readdatavalid(avs_const_lambda_1_cra_readdatavalid)
   );

   // INST const_lambda_1_csr_agent_reset_delay_inst of acl_reset_handler
   acl_reset_handler
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_ACLRN(1),
      .USE_SYNCHRONIZER(1),
      .PULSE_EXTENSION(0),
      .PIPE_DEPTH(10),
      .NUM_COPIES(1)
   )
   const_lambda_1_csr_agent_reset_delay_inst
   (
      .clk(clock),
      .i_resetn(resetn),
      .o_aclrn(),
      .o_sclrn(const_lambda_1_resetn_delayed),
      .o_resetn_synchronized()
   );

   // INST const_lambda_1_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(31),
      .LOCAL_WIDTH_Y(31),
      .LOCAL_WIDTH_Z(31),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   const_lambda_1_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_1_wg_disp_start_out),
      .valid_in(const_lambda_1_wg_disp_valid_out[0]),
      .stall_out(const_lambda_1_wg_disp_stall_in[0]),
      .stall_out_lookahead(const_lambda_1_wg_disp_stall_in_lookahead[0]),
      .stall_in(const_lambda_1_stall_out[0]),
      .valid_out(const_lambda_1_valid_in[0]),
      .group_id_in(const_lambda_1_wg_disp_group_id_out),
      .global_id_base_in(const_lambda_1_wg_disp_global_id_base_out),
      .local_size(const_lambda_1_local_size),
      .global_size(const_lambda_1_global_size),
      .global_work_offset(const_lambda_1_global_offset),
      .local_id(const_lambda_1_local_id[0]),
      .global_id(const_lambda_1_global_id[0]),
      .group_id(const_lambda_1_group_id[0])
   );

   // INST const_lambda_1_inst_0 of const_lambda_1_top_wrapper_0
   const_lambda_1_top_wrapper_0 const_lambda_1_inst_0
   (
      .start(const_lambda_1_start_kernel_copy[0]),
      .kernel_arguments(const_lambda_1_kernel_arguments),
      .work_dim(const_lambda_1_work_dim),
      .global_offset(const_lambda_1_global_offset),
      .kernel_valid_out(const_lambda_1_valid_out[0]),
      .has_a_write_pending(const_lambda_1_pending_write[0]),
      .has_a_lsu_active(const_lambda_1_lsu_active[0]),
      .global_id(const_lambda_1_global_id[0]),
      .local_id(const_lambda_1_local_id[0]),
      .group_id(const_lambda_1_group_id[0]),
      .global_size(const_lambda_1_global_size),
      .local_size(const_lambda_1_local_size),
      .num_groups(const_lambda_1_num_groups),
      .workgroup_size(const_lambda_1_wg_size),
      .kernel_stall_out(const_lambda_1_stall_out[0]),
      .kernel_valid_in(const_lambda_1_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm4_const_lambda_1
      .avm_lm4_const_lambda_1_enable(const_lambda_1_0_avm_lm4_const_lambda_1_enable),
      .avm_lm4_const_lambda_1_read(const_lambda_1_0_avm_lm4_const_lambda_1_read),
      .avm_lm4_const_lambda_1_write(const_lambda_1_0_avm_lm4_const_lambda_1_write),
      .avm_lm4_const_lambda_1_address(const_lambda_1_0_avm_lm4_const_lambda_1_address),
      .avm_lm4_const_lambda_1_writedata(const_lambda_1_0_avm_lm4_const_lambda_1_writedata),
      .avm_lm4_const_lambda_1_byteenable(const_lambda_1_0_avm_lm4_const_lambda_1_byteenable),
      .avm_lm4_const_lambda_1_waitrequest(const_lambda_1_0_avm_lm4_const_lambda_1_waitrequest),
      .avm_lm4_const_lambda_1_readdata(const_lambda_1_0_avm_lm4_const_lambda_1_readdata),
      .avm_lm4_const_lambda_1_readdatavalid(const_lambda_1_0_avm_lm4_const_lambda_1_readdatavalid),
      .avm_lm4_const_lambda_1_burstcount(const_lambda_1_0_avm_lm4_const_lambda_1_burstcount),
      .avm_lm4_const_lambda_1_writeack(const_lambda_1_0_avm_lm4_const_lambda_1_writeack),
      // AVM avm_lm_const_lambda_1
      .avm_lm_const_lambda_1_enable(const_lambda_1_0_avm_lm_const_lambda_1_enable),
      .avm_lm_const_lambda_1_read(const_lambda_1_0_avm_lm_const_lambda_1_read),
      .avm_lm_const_lambda_1_write(const_lambda_1_0_avm_lm_const_lambda_1_write),
      .avm_lm_const_lambda_1_address(const_lambda_1_0_avm_lm_const_lambda_1_address),
      .avm_lm_const_lambda_1_writedata(const_lambda_1_0_avm_lm_const_lambda_1_writedata),
      .avm_lm_const_lambda_1_byteenable(const_lambda_1_0_avm_lm_const_lambda_1_byteenable),
      .avm_lm_const_lambda_1_waitrequest(const_lambda_1_0_avm_lm_const_lambda_1_waitrequest),
      .avm_lm_const_lambda_1_readdata(const_lambda_1_0_avm_lm_const_lambda_1_readdata),
      .avm_lm_const_lambda_1_readdatavalid(const_lambda_1_0_avm_lm_const_lambda_1_readdatavalid),
      .avm_lm_const_lambda_1_burstcount(const_lambda_1_0_avm_lm_const_lambda_1_burstcount),
      .avm_lm_const_lambda_1_writeack(const_lambda_1_0_avm_lm_const_lambda_1_writeack),
      // AVM avm_memdep_const_lambda_1
      .avm_memdep_const_lambda_1_enable(const_lambda_1_0_avm_memdep_const_lambda_1_enable),
      .avm_memdep_const_lambda_1_read(const_lambda_1_0_avm_memdep_const_lambda_1_read),
      .avm_memdep_const_lambda_1_write(const_lambda_1_0_avm_memdep_const_lambda_1_write),
      .avm_memdep_const_lambda_1_address(const_lambda_1_0_avm_memdep_const_lambda_1_address),
      .avm_memdep_const_lambda_1_writedata(const_lambda_1_0_avm_memdep_const_lambda_1_writedata),
      .avm_memdep_const_lambda_1_byteenable(const_lambda_1_0_avm_memdep_const_lambda_1_byteenable),
      .avm_memdep_const_lambda_1_waitrequest(const_lambda_1_0_avm_memdep_const_lambda_1_waitrequest),
      .avm_memdep_const_lambda_1_readdata(const_lambda_1_0_avm_memdep_const_lambda_1_readdata),
      .avm_memdep_const_lambda_1_readdatavalid(const_lambda_1_0_avm_memdep_const_lambda_1_readdatavalid),
      .avm_memdep_const_lambda_1_burstcount(const_lambda_1_0_avm_memdep_const_lambda_1_burstcount),
      .avm_memdep_const_lambda_1_writeack(const_lambda_1_0_avm_memdep_const_lambda_1_writeack),
      // AVM avm_unnamed_const_lambda_11_const_lambda_1
      .avm_unnamed_const_lambda_11_const_lambda_1_enable(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_enable),
      .avm_unnamed_const_lambda_11_const_lambda_1_read(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_read),
      .avm_unnamed_const_lambda_11_const_lambda_1_write(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_write),
      .avm_unnamed_const_lambda_11_const_lambda_1_address(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_address),
      .avm_unnamed_const_lambda_11_const_lambda_1_writedata(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_writedata),
      .avm_unnamed_const_lambda_11_const_lambda_1_byteenable(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_byteenable),
      .avm_unnamed_const_lambda_11_const_lambda_1_waitrequest(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_waitrequest),
      .avm_unnamed_const_lambda_11_const_lambda_1_readdata(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_readdata),
      .avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid),
      .avm_unnamed_const_lambda_11_const_lambda_1_burstcount(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_burstcount),
      .avm_unnamed_const_lambda_11_const_lambda_1_writeack(const_lambda_1_0_avm_unnamed_const_lambda_11_const_lambda_1_writeack)
   );

   // INST const_lambda_1_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1)
   )
   const_lambda_1_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(const_lambda_1_start_chain[0]),
      .start_kernel(const_lambda_1_start_kernel_copy[0]),
      .start_finish_detector(const_lambda_1_start_task_fd[0]),
      .start_finish_chain_element(const_lambda_1_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_4_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module const_lambda_4_std_ic_partition_wrapper
(
   input logic clock,
   input logic resetn,
   output logic cra_irq_const_lambda_4,
   // AVS avs_const_lambda_4_cra
   input logic avs_const_lambda_4_cra_enable,
   input logic avs_const_lambda_4_cra_read,
   input logic avs_const_lambda_4_cra_write,
   input logic [5:0] avs_const_lambda_4_cra_address,
   input logic [63:0] avs_const_lambda_4_cra_writedata,
   input logic [7:0] avs_const_lambda_4_cra_byteenable,
   output logic [63:0] avs_const_lambda_4_cra_readdata,
   output logic avs_const_lambda_4_cra_readdatavalid,
   // AVM const_lambda_4_0_avm_lm1_const_lambda_4
   output logic const_lambda_4_0_avm_lm1_const_lambda_4_enable,
   output logic const_lambda_4_0_avm_lm1_const_lambda_4_read,
   output logic const_lambda_4_0_avm_lm1_const_lambda_4_write,
   output logic [34:0] const_lambda_4_0_avm_lm1_const_lambda_4_address,
   output logic [63:0] const_lambda_4_0_avm_lm1_const_lambda_4_writedata,
   output logic [7:0] const_lambda_4_0_avm_lm1_const_lambda_4_byteenable,
   input logic const_lambda_4_0_avm_lm1_const_lambda_4_waitrequest,
   input logic [63:0] const_lambda_4_0_avm_lm1_const_lambda_4_readdata,
   input logic const_lambda_4_0_avm_lm1_const_lambda_4_readdatavalid,
   output logic const_lambda_4_0_avm_lm1_const_lambda_4_burstcount,
   input logic const_lambda_4_0_avm_lm1_const_lambda_4_writeack,
   // AVM const_lambda_4_0_avm_lm_const_lambda_4
   output logic const_lambda_4_0_avm_lm_const_lambda_4_enable,
   output logic const_lambda_4_0_avm_lm_const_lambda_4_read,
   output logic const_lambda_4_0_avm_lm_const_lambda_4_write,
   output logic [34:0] const_lambda_4_0_avm_lm_const_lambda_4_address,
   output logic [63:0] const_lambda_4_0_avm_lm_const_lambda_4_writedata,
   output logic [7:0] const_lambda_4_0_avm_lm_const_lambda_4_byteenable,
   input logic const_lambda_4_0_avm_lm_const_lambda_4_waitrequest,
   input logic [63:0] const_lambda_4_0_avm_lm_const_lambda_4_readdata,
   input logic const_lambda_4_0_avm_lm_const_lambda_4_readdatavalid,
   output logic const_lambda_4_0_avm_lm_const_lambda_4_burstcount,
   input logic const_lambda_4_0_avm_lm_const_lambda_4_writeack,
   // AVM const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4
   output logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_enable,
   output logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_read,
   output logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_write,
   output logic [34:0] const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_address,
   output logic [63:0] const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_writedata,
   output logic [7:0] const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_byteenable,
   input logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_waitrequest,
   input logic [63:0] const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_readdata,
   input logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid,
   output logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_burstcount,
   input logic const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_writeack,
   // AVM const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4
   output logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_enable,
   output logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_read,
   output logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_write,
   output logic [34:0] const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_address,
   output logic [63:0] const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_writedata,
   output logic [7:0] const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_byteenable,
   input logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_waitrequest,
   input logic [63:0] const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_readdata,
   input logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid,
   output logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_burstcount,
   input logic const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_writeack
);
   logic const_lambda_4_start;
   logic [0:0] const_lambda_4_start_chain;
   logic [0:0] const_lambda_4_start_kernel_copy;
   logic [0:0] const_lambda_4_start_task_fd;
   logic [0:0] const_lambda_4_start_finish_element;
   logic const_lambda_4_finish_sig;
   logic [0:0] const_lambda_4_finish_kernel_copy;
   logic [0:0] const_lambda_4_finish_chain;
   logic [63:0] const_lambda_4_global_size [2:0];
   logic [31:0] const_lambda_4_num_groups [2:0];
   logic [31:0] const_lambda_4_local_size [2:0];
   logic [63:0] const_lambda_4_global_offset [2:0];
   logic [31:0] const_lambda_4_work_dim;
   logic [31:0] const_lambda_4_wg_size;
   logic [0:0] const_lambda_4_wg_disp_stall_in;
   logic [0:0] const_lambda_4_wg_disp_stall_in_lookahead;
   logic [0:0] const_lambda_4_wg_disp_valid_out;
   logic const_lambda_4_wg_disp_start_out;
   logic [31:0] const_lambda_4_wg_disp_group_id_out [2:0];
   logic [31:0] const_lambda_4_wg_disp_global_id_base_out [2:0];
   logic const_lambda_4_wg_disp_dispatched_all_groups;
   logic [63:0] const_lambda_4_global_id [1][2:0];
   logic [31:0] const_lambda_4_local_id [1][2:0];
   logic [31:0] const_lambda_4_group_id [1][2:0];
   logic [0:0] const_lambda_4_pending_write;
   logic [0:0] const_lambda_4_lsu_active;
   logic [0:0] const_lambda_4_valid_in;
   logic [0:0] const_lambda_4_valid_out;
   logic [0:0] const_lambda_4_stall_in;
   logic [0:0] const_lambda_4_stall_out;
   logic const_lambda_4_csr_pending_write;
   logic const_lambda_4_csr_lsu_active;
   logic const_lambda_4_csr_valid_in;
   logic const_lambda_4_resetn_delayed;
   logic [1439:0] const_lambda_4_kernel_arguments;

   assign const_lambda_4_start_chain[0] = const_lambda_4_start;
   assign const_lambda_4_finish_chain[0] = 1'b1;
   assign const_lambda_4_csr_pending_write = |const_lambda_4_pending_write;
   assign const_lambda_4_csr_lsu_active = |const_lambda_4_lsu_active;
   assign const_lambda_4_csr_valid_in = |const_lambda_4_valid_in;
   assign const_lambda_4_stall_in = 0;
   // INST const_lambda_4_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_4_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_4_start),
      .num_groups(const_lambda_4_num_groups),
      .local_size(const_lambda_4_local_size),
      .stall_in(const_lambda_4_wg_disp_stall_in),
      .stall_in_lookahead(const_lambda_4_wg_disp_stall_in_lookahead),
      .valid_out(const_lambda_4_wg_disp_valid_out),
      .group_id_out(const_lambda_4_wg_disp_group_id_out),
      .global_id_base_out(const_lambda_4_wg_disp_global_id_base_out),
      .start_out(const_lambda_4_wg_disp_start_out),
      .dispatched_all_groups(const_lambda_4_wg_disp_dispatched_all_groups)
   );

   // INST const_lambda_4_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(16),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1)
   )
   const_lambda_4_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_4_start),
      .wg_size(const_lambda_4_wg_size),
      .wg_dispatch_valid_out(const_lambda_4_wg_disp_valid_out),
      .wg_dispatch_stall_in(const_lambda_4_wg_disp_stall_in),
      .dispatched_all_groups(const_lambda_4_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(const_lambda_4_valid_out),
      .kernel_copy_stall_in(const_lambda_4_stall_in),
      .pending_writes(const_lambda_4_csr_pending_write),
      .finish(const_lambda_4_finish_sig)
   );

   // INST const_lambda_4_csr_agent_inst of const_lambda_4_function_cra_agent
   const_lambda_4_function_cra_agent const_lambda_4_csr_agent_inst
   (
      .clock(clock),
      .resetn(const_lambda_4_resetn_delayed),
      .kernel_start(const_lambda_4_start),
      .kernel_done(const_lambda_4_finish_sig),
      .global_offset_0(const_lambda_4_global_offset[0]),
      .global_offset_1(const_lambda_4_global_offset[1]),
      .global_offset_2(const_lambda_4_global_offset[2]),
      .work_dim(const_lambda_4_work_dim),
      .has_a_lsu_active(const_lambda_4_csr_lsu_active),
      .has_a_write_pending(const_lambda_4_csr_pending_write),
      .valid_in(const_lambda_4_csr_valid_in),
      .global_size_0(const_lambda_4_global_size[0]),
      .global_size_1(const_lambda_4_global_size[1]),
      .global_size_2(const_lambda_4_global_size[2]),
      .num_groups_0(const_lambda_4_num_groups[0]),
      .num_groups_1(const_lambda_4_num_groups[1]),
      .num_groups_2(const_lambda_4_num_groups[2]),
      .local_size_0(const_lambda_4_local_size[0]),
      .local_size_1(const_lambda_4_local_size[1]),
      .local_size_2(const_lambda_4_local_size[2]),
      .workgroup_size(const_lambda_4_wg_size),
      .kernel_arguments(const_lambda_4_kernel_arguments),
      .cra_irq(cra_irq_const_lambda_4),
      // AVS avs_cra
      .avs_cra_enable(avs_const_lambda_4_cra_enable),
      .avs_cra_read(avs_const_lambda_4_cra_read),
      .avs_cra_write(avs_const_lambda_4_cra_write),
      .avs_cra_address(avs_const_lambda_4_cra_address),
      .avs_cra_writedata(avs_const_lambda_4_cra_writedata),
      .avs_cra_byteenable(avs_const_lambda_4_cra_byteenable),
      .avs_cra_readdata(avs_const_lambda_4_cra_readdata),
      .avs_cra_readdatavalid(avs_const_lambda_4_cra_readdatavalid)
   );

   // INST const_lambda_4_csr_agent_reset_delay_inst of acl_reset_handler
   acl_reset_handler
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_ACLRN(1),
      .USE_SYNCHRONIZER(1),
      .PULSE_EXTENSION(0),
      .PIPE_DEPTH(10),
      .NUM_COPIES(1)
   )
   const_lambda_4_csr_agent_reset_delay_inst
   (
      .clk(clock),
      .i_resetn(resetn),
      .o_aclrn(),
      .o_sclrn(const_lambda_4_resetn_delayed),
      .o_resetn_synchronized()
   );

   // INST const_lambda_4_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(0),
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1),
      .HYPER_PIPELINE(1),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   const_lambda_4_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(const_lambda_4_wg_disp_start_out),
      .valid_in(const_lambda_4_wg_disp_valid_out[0]),
      .stall_out(const_lambda_4_wg_disp_stall_in[0]),
      .stall_out_lookahead(const_lambda_4_wg_disp_stall_in_lookahead[0]),
      .stall_in(const_lambda_4_stall_out[0]),
      .valid_out(const_lambda_4_valid_in[0]),
      .group_id_in(const_lambda_4_wg_disp_group_id_out),
      .global_id_base_in(const_lambda_4_wg_disp_global_id_base_out),
      .local_size(const_lambda_4_local_size),
      .global_size(const_lambda_4_global_size),
      .global_work_offset(const_lambda_4_global_offset),
      .local_id(const_lambda_4_local_id[0]),
      .global_id(const_lambda_4_global_id[0]),
      .group_id(const_lambda_4_group_id[0])
   );

   // INST const_lambda_4_inst_0 of const_lambda_4_top_wrapper_0
   const_lambda_4_top_wrapper_0 const_lambda_4_inst_0
   (
      .start(const_lambda_4_start_kernel_copy[0]),
      .kernel_arguments(const_lambda_4_kernel_arguments),
      .work_dim(const_lambda_4_work_dim),
      .global_offset(const_lambda_4_global_offset),
      .kernel_valid_out(const_lambda_4_valid_out[0]),
      .has_a_write_pending(const_lambda_4_pending_write[0]),
      .has_a_lsu_active(const_lambda_4_lsu_active[0]),
      .global_id(const_lambda_4_global_id[0]),
      .local_id(const_lambda_4_local_id[0]),
      .group_id(const_lambda_4_group_id[0]),
      .global_size(const_lambda_4_global_size),
      .local_size(const_lambda_4_local_size),
      .num_groups(const_lambda_4_num_groups),
      .workgroup_size(const_lambda_4_wg_size),
      .kernel_stall_out(const_lambda_4_stall_out[0]),
      .kernel_valid_in(const_lambda_4_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm1_const_lambda_4
      .avm_lm1_const_lambda_4_enable(const_lambda_4_0_avm_lm1_const_lambda_4_enable),
      .avm_lm1_const_lambda_4_read(const_lambda_4_0_avm_lm1_const_lambda_4_read),
      .avm_lm1_const_lambda_4_write(const_lambda_4_0_avm_lm1_const_lambda_4_write),
      .avm_lm1_const_lambda_4_address(const_lambda_4_0_avm_lm1_const_lambda_4_address),
      .avm_lm1_const_lambda_4_writedata(const_lambda_4_0_avm_lm1_const_lambda_4_writedata),
      .avm_lm1_const_lambda_4_byteenable(const_lambda_4_0_avm_lm1_const_lambda_4_byteenable),
      .avm_lm1_const_lambda_4_waitrequest(const_lambda_4_0_avm_lm1_const_lambda_4_waitrequest),
      .avm_lm1_const_lambda_4_readdata(const_lambda_4_0_avm_lm1_const_lambda_4_readdata),
      .avm_lm1_const_lambda_4_readdatavalid(const_lambda_4_0_avm_lm1_const_lambda_4_readdatavalid),
      .avm_lm1_const_lambda_4_burstcount(const_lambda_4_0_avm_lm1_const_lambda_4_burstcount),
      .avm_lm1_const_lambda_4_writeack(const_lambda_4_0_avm_lm1_const_lambda_4_writeack),
      // AVM avm_lm_const_lambda_4
      .avm_lm_const_lambda_4_enable(const_lambda_4_0_avm_lm_const_lambda_4_enable),
      .avm_lm_const_lambda_4_read(const_lambda_4_0_avm_lm_const_lambda_4_read),
      .avm_lm_const_lambda_4_write(const_lambda_4_0_avm_lm_const_lambda_4_write),
      .avm_lm_const_lambda_4_address(const_lambda_4_0_avm_lm_const_lambda_4_address),
      .avm_lm_const_lambda_4_writedata(const_lambda_4_0_avm_lm_const_lambda_4_writedata),
      .avm_lm_const_lambda_4_byteenable(const_lambda_4_0_avm_lm_const_lambda_4_byteenable),
      .avm_lm_const_lambda_4_waitrequest(const_lambda_4_0_avm_lm_const_lambda_4_waitrequest),
      .avm_lm_const_lambda_4_readdata(const_lambda_4_0_avm_lm_const_lambda_4_readdata),
      .avm_lm_const_lambda_4_readdatavalid(const_lambda_4_0_avm_lm_const_lambda_4_readdatavalid),
      .avm_lm_const_lambda_4_burstcount(const_lambda_4_0_avm_lm_const_lambda_4_burstcount),
      .avm_lm_const_lambda_4_writeack(const_lambda_4_0_avm_lm_const_lambda_4_writeack),
      // AVM avm_unnamed_const_lambda_40_const_lambda_4
      .avm_unnamed_const_lambda_40_const_lambda_4_enable(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_enable),
      .avm_unnamed_const_lambda_40_const_lambda_4_read(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_read),
      .avm_unnamed_const_lambda_40_const_lambda_4_write(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_write),
      .avm_unnamed_const_lambda_40_const_lambda_4_address(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_address),
      .avm_unnamed_const_lambda_40_const_lambda_4_writedata(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_writedata),
      .avm_unnamed_const_lambda_40_const_lambda_4_byteenable(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_byteenable),
      .avm_unnamed_const_lambda_40_const_lambda_4_waitrequest(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_waitrequest),
      .avm_unnamed_const_lambda_40_const_lambda_4_readdata(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_readdata),
      .avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid),
      .avm_unnamed_const_lambda_40_const_lambda_4_burstcount(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_burstcount),
      .avm_unnamed_const_lambda_40_const_lambda_4_writeack(const_lambda_4_0_avm_unnamed_const_lambda_40_const_lambda_4_writeack),
      // AVM avm_unnamed_const_lambda_43_const_lambda_4
      .avm_unnamed_const_lambda_43_const_lambda_4_enable(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_enable),
      .avm_unnamed_const_lambda_43_const_lambda_4_read(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_read),
      .avm_unnamed_const_lambda_43_const_lambda_4_write(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_write),
      .avm_unnamed_const_lambda_43_const_lambda_4_address(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_address),
      .avm_unnamed_const_lambda_43_const_lambda_4_writedata(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_writedata),
      .avm_unnamed_const_lambda_43_const_lambda_4_byteenable(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_byteenable),
      .avm_unnamed_const_lambda_43_const_lambda_4_waitrequest(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_waitrequest),
      .avm_unnamed_const_lambda_43_const_lambda_4_readdata(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_readdata),
      .avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid),
      .avm_unnamed_const_lambda_43_const_lambda_4_burstcount(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_burstcount),
      .avm_unnamed_const_lambda_43_const_lambda_4_writeack(const_lambda_4_0_avm_unnamed_const_lambda_43_const_lambda_4_writeack)
   );

   // INST const_lambda_4_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(0),
      .SYNCHRONIZE_RESET(1)
   )
   const_lambda_4_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(const_lambda_4_start_chain[0]),
      .start_kernel(const_lambda_4_start_kernel_copy[0]),
      .start_finish_detector(const_lambda_4_start_task_fd[0]),
      .start_finish_chain_element(const_lambda_4_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_3_top_wrapper_0
/////////////////////////////////////////////////////////////////
module const_lambda_3_top_wrapper_0
(
   input logic start,
   input logic [767:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   // AVM avm_lm_const_lambda_3
   output logic avm_lm_const_lambda_3_enable,
   output logic avm_lm_const_lambda_3_read,
   output logic avm_lm_const_lambda_3_write,
   output logic [34:0] avm_lm_const_lambda_3_address,
   output logic [63:0] avm_lm_const_lambda_3_writedata,
   output logic [7:0] avm_lm_const_lambda_3_byteenable,
   input logic avm_lm_const_lambda_3_waitrequest,
   input logic [63:0] avm_lm_const_lambda_3_readdata,
   input logic avm_lm_const_lambda_3_readdatavalid,
   output logic avm_lm_const_lambda_3_burstcount,
   input logic avm_lm_const_lambda_3_writeack,
   // AVM avm_unnamed_const_lambda_31_const_lambda_3
   output logic avm_unnamed_const_lambda_31_const_lambda_3_enable,
   output logic avm_unnamed_const_lambda_31_const_lambda_3_read,
   output logic avm_unnamed_const_lambda_31_const_lambda_3_write,
   output logic [34:0] avm_unnamed_const_lambda_31_const_lambda_3_address,
   output logic [63:0] avm_unnamed_const_lambda_31_const_lambda_3_writedata,
   output logic [7:0] avm_unnamed_const_lambda_31_const_lambda_3_byteenable,
   input logic avm_unnamed_const_lambda_31_const_lambda_3_waitrequest,
   input logic [63:0] avm_unnamed_const_lambda_31_const_lambda_3_readdata,
   input logic avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid,
   output logic avm_unnamed_const_lambda_31_const_lambda_3_burstcount,
   input logic avm_unnamed_const_lambda_31_const_lambda_3_writeack
);
   // INST kernel of const_lambda_3_function_wrapper
   const_lambda_3_function_wrapper kernel
   (
      .local_router_hang(),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm_const_lambda_3
      .avm_lm_const_lambda_3_enable(avm_lm_const_lambda_3_enable),
      .avm_lm_const_lambda_3_read(avm_lm_const_lambda_3_read),
      .avm_lm_const_lambda_3_write(avm_lm_const_lambda_3_write),
      .avm_lm_const_lambda_3_address(avm_lm_const_lambda_3_address),
      .avm_lm_const_lambda_3_writedata(avm_lm_const_lambda_3_writedata),
      .avm_lm_const_lambda_3_byteenable(avm_lm_const_lambda_3_byteenable),
      .avm_lm_const_lambda_3_waitrequest(avm_lm_const_lambda_3_waitrequest),
      .avm_lm_const_lambda_3_readdata(avm_lm_const_lambda_3_readdata),
      .avm_lm_const_lambda_3_readdatavalid(avm_lm_const_lambda_3_readdatavalid),
      .avm_lm_const_lambda_3_burstcount(avm_lm_const_lambda_3_burstcount),
      .avm_lm_const_lambda_3_writeack(avm_lm_const_lambda_3_writeack),
      // AVM avm_unnamed_const_lambda_31_const_lambda_3
      .avm_unnamed_const_lambda_31_const_lambda_3_enable(avm_unnamed_const_lambda_31_const_lambda_3_enable),
      .avm_unnamed_const_lambda_31_const_lambda_3_read(avm_unnamed_const_lambda_31_const_lambda_3_read),
      .avm_unnamed_const_lambda_31_const_lambda_3_write(avm_unnamed_const_lambda_31_const_lambda_3_write),
      .avm_unnamed_const_lambda_31_const_lambda_3_address(avm_unnamed_const_lambda_31_const_lambda_3_address),
      .avm_unnamed_const_lambda_31_const_lambda_3_writedata(avm_unnamed_const_lambda_31_const_lambda_3_writedata),
      .avm_unnamed_const_lambda_31_const_lambda_3_byteenable(avm_unnamed_const_lambda_31_const_lambda_3_byteenable),
      .avm_unnamed_const_lambda_31_const_lambda_3_waitrequest(avm_unnamed_const_lambda_31_const_lambda_3_waitrequest),
      .avm_unnamed_const_lambda_31_const_lambda_3_readdata(avm_unnamed_const_lambda_31_const_lambda_3_readdata),
      .avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid(avm_unnamed_const_lambda_31_const_lambda_3_readdatavalid),
      .avm_unnamed_const_lambda_31_const_lambda_3_burstcount(avm_unnamed_const_lambda_31_const_lambda_3_burstcount),
      .avm_unnamed_const_lambda_31_const_lambda_3_writeack(avm_unnamed_const_lambda_31_const_lambda_3_writeack)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_2_top_wrapper_0
/////////////////////////////////////////////////////////////////
module const_lambda_2_top_wrapper_0
(
   input logic start,
   input logic [1407:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   // AVM avm_lm16_const_lambda_2
   output logic avm_lm16_const_lambda_2_enable,
   output logic avm_lm16_const_lambda_2_read,
   output logic avm_lm16_const_lambda_2_write,
   output logic [34:0] avm_lm16_const_lambda_2_address,
   output logic [63:0] avm_lm16_const_lambda_2_writedata,
   output logic [7:0] avm_lm16_const_lambda_2_byteenable,
   input logic avm_lm16_const_lambda_2_waitrequest,
   input logic [63:0] avm_lm16_const_lambda_2_readdata,
   input logic avm_lm16_const_lambda_2_readdatavalid,
   output logic avm_lm16_const_lambda_2_burstcount,
   input logic avm_lm16_const_lambda_2_writeack,
   // AVM avm_lm18_const_lambda_2
   output logic avm_lm18_const_lambda_2_enable,
   output logic avm_lm18_const_lambda_2_read,
   output logic avm_lm18_const_lambda_2_write,
   output logic [34:0] avm_lm18_const_lambda_2_address,
   output logic [63:0] avm_lm18_const_lambda_2_writedata,
   output logic [7:0] avm_lm18_const_lambda_2_byteenable,
   input logic avm_lm18_const_lambda_2_waitrequest,
   input logic [63:0] avm_lm18_const_lambda_2_readdata,
   input logic avm_lm18_const_lambda_2_readdatavalid,
   output logic avm_lm18_const_lambda_2_burstcount,
   input logic avm_lm18_const_lambda_2_writeack,
   // AVM avm_lm9_const_lambda_2
   output logic avm_lm9_const_lambda_2_enable,
   output logic avm_lm9_const_lambda_2_read,
   output logic avm_lm9_const_lambda_2_write,
   output logic [34:0] avm_lm9_const_lambda_2_address,
   output logic [63:0] avm_lm9_const_lambda_2_writedata,
   output logic [7:0] avm_lm9_const_lambda_2_byteenable,
   input logic avm_lm9_const_lambda_2_waitrequest,
   input logic [63:0] avm_lm9_const_lambda_2_readdata,
   input logic avm_lm9_const_lambda_2_readdatavalid,
   output logic avm_lm9_const_lambda_2_burstcount,
   input logic avm_lm9_const_lambda_2_writeack,
   // AVM avm_memdep_4_const_lambda_2
   output logic avm_memdep_4_const_lambda_2_enable,
   output logic avm_memdep_4_const_lambda_2_read,
   output logic avm_memdep_4_const_lambda_2_write,
   output logic [34:0] avm_memdep_4_const_lambda_2_address,
   output logic [63:0] avm_memdep_4_const_lambda_2_writedata,
   output logic [7:0] avm_memdep_4_const_lambda_2_byteenable,
   input logic avm_memdep_4_const_lambda_2_waitrequest,
   input logic [63:0] avm_memdep_4_const_lambda_2_readdata,
   input logic avm_memdep_4_const_lambda_2_readdatavalid,
   output logic avm_memdep_4_const_lambda_2_burstcount,
   input logic avm_memdep_4_const_lambda_2_writeack,
   // AVM avm_memdep_5_const_lambda_2
   output logic avm_memdep_5_const_lambda_2_enable,
   output logic avm_memdep_5_const_lambda_2_read,
   output logic avm_memdep_5_const_lambda_2_write,
   output logic [34:0] avm_memdep_5_const_lambda_2_address,
   output logic [63:0] avm_memdep_5_const_lambda_2_writedata,
   output logic [7:0] avm_memdep_5_const_lambda_2_byteenable,
   input logic avm_memdep_5_const_lambda_2_waitrequest,
   input logic [63:0] avm_memdep_5_const_lambda_2_readdata,
   input logic avm_memdep_5_const_lambda_2_readdatavalid,
   output logic avm_memdep_5_const_lambda_2_burstcount,
   input logic avm_memdep_5_const_lambda_2_writeack,
   // AVM avm_unnamed_const_lambda_23_const_lambda_2
   output logic avm_unnamed_const_lambda_23_const_lambda_2_enable,
   output logic avm_unnamed_const_lambda_23_const_lambda_2_read,
   output logic avm_unnamed_const_lambda_23_const_lambda_2_write,
   output logic [34:0] avm_unnamed_const_lambda_23_const_lambda_2_address,
   output logic [63:0] avm_unnamed_const_lambda_23_const_lambda_2_writedata,
   output logic [7:0] avm_unnamed_const_lambda_23_const_lambda_2_byteenable,
   input logic avm_unnamed_const_lambda_23_const_lambda_2_waitrequest,
   input logic [63:0] avm_unnamed_const_lambda_23_const_lambda_2_readdata,
   input logic avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid,
   output logic avm_unnamed_const_lambda_23_const_lambda_2_burstcount,
   input logic avm_unnamed_const_lambda_23_const_lambda_2_writeack,
   input logic lmem_invalid_single_bit,
   // AVM avm_lm22189_const_lambda_2
   output logic avm_lm22189_const_lambda_2_enable,
   output logic avm_lm22189_const_lambda_2_read,
   output logic avm_lm22189_const_lambda_2_write,
   output logic [31:0] avm_lm22189_const_lambda_2_address,
   output logic [31:0] avm_lm22189_const_lambda_2_writedata,
   output logic [3:0] avm_lm22189_const_lambda_2_byteenable,
   input logic avm_lm22189_const_lambda_2_waitrequest,
   input logic [31:0] avm_lm22189_const_lambda_2_readdata,
   input logic avm_lm22189_const_lambda_2_readdatavalid,
   output logic avm_lm22189_const_lambda_2_burstcount,
   input logic avm_lm22189_const_lambda_2_writeack,
   // AVM avm_memdep_388_const_lambda_2
   output logic avm_memdep_388_const_lambda_2_enable,
   output logic avm_memdep_388_const_lambda_2_read,
   output logic avm_memdep_388_const_lambda_2_write,
   output logic [31:0] avm_memdep_388_const_lambda_2_address,
   output logic [31:0] avm_memdep_388_const_lambda_2_writedata,
   output logic [3:0] avm_memdep_388_const_lambda_2_byteenable,
   input logic avm_memdep_388_const_lambda_2_waitrequest,
   input logic [31:0] avm_memdep_388_const_lambda_2_readdata,
   input logic avm_memdep_388_const_lambda_2_readdatavalid,
   output logic avm_memdep_388_const_lambda_2_burstcount,
   input logic avm_memdep_388_const_lambda_2_writeack,
   // AVM avm_lm287_const_lambda_2
   output logic avm_lm287_const_lambda_2_enable,
   output logic avm_lm287_const_lambda_2_read,
   output logic avm_lm287_const_lambda_2_write,
   output logic [31:0] avm_lm287_const_lambda_2_address,
   output logic [31:0] avm_lm287_const_lambda_2_writedata,
   output logic [3:0] avm_lm287_const_lambda_2_byteenable,
   input logic avm_lm287_const_lambda_2_waitrequest,
   input logic [31:0] avm_lm287_const_lambda_2_readdata,
   input logic avm_lm287_const_lambda_2_readdatavalid,
   output logic avm_lm287_const_lambda_2_burstcount,
   input logic avm_lm287_const_lambda_2_writeack,
   // AVM avm_memdep_86_const_lambda_2
   output logic avm_memdep_86_const_lambda_2_enable,
   output logic avm_memdep_86_const_lambda_2_read,
   output logic avm_memdep_86_const_lambda_2_write,
   output logic [31:0] avm_memdep_86_const_lambda_2_address,
   output logic [31:0] avm_memdep_86_const_lambda_2_writedata,
   output logic [3:0] avm_memdep_86_const_lambda_2_byteenable,
   input logic avm_memdep_86_const_lambda_2_waitrequest,
   input logic [31:0] avm_memdep_86_const_lambda_2_readdata,
   input logic avm_memdep_86_const_lambda_2_readdatavalid,
   output logic avm_memdep_86_const_lambda_2_burstcount,
   input logic avm_memdep_86_const_lambda_2_writeack
);
   // INST kernel of const_lambda_2_function_wrapper
   const_lambda_2_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm16_const_lambda_2
      .avm_lm16_const_lambda_2_enable(avm_lm16_const_lambda_2_enable),
      .avm_lm16_const_lambda_2_read(avm_lm16_const_lambda_2_read),
      .avm_lm16_const_lambda_2_write(avm_lm16_const_lambda_2_write),
      .avm_lm16_const_lambda_2_address(avm_lm16_const_lambda_2_address),
      .avm_lm16_const_lambda_2_writedata(avm_lm16_const_lambda_2_writedata),
      .avm_lm16_const_lambda_2_byteenable(avm_lm16_const_lambda_2_byteenable),
      .avm_lm16_const_lambda_2_waitrequest(avm_lm16_const_lambda_2_waitrequest),
      .avm_lm16_const_lambda_2_readdata(avm_lm16_const_lambda_2_readdata),
      .avm_lm16_const_lambda_2_readdatavalid(avm_lm16_const_lambda_2_readdatavalid),
      .avm_lm16_const_lambda_2_burstcount(avm_lm16_const_lambda_2_burstcount),
      .avm_lm16_const_lambda_2_writeack(avm_lm16_const_lambda_2_writeack),
      // AVM avm_lm18_const_lambda_2
      .avm_lm18_const_lambda_2_enable(avm_lm18_const_lambda_2_enable),
      .avm_lm18_const_lambda_2_read(avm_lm18_const_lambda_2_read),
      .avm_lm18_const_lambda_2_write(avm_lm18_const_lambda_2_write),
      .avm_lm18_const_lambda_2_address(avm_lm18_const_lambda_2_address),
      .avm_lm18_const_lambda_2_writedata(avm_lm18_const_lambda_2_writedata),
      .avm_lm18_const_lambda_2_byteenable(avm_lm18_const_lambda_2_byteenable),
      .avm_lm18_const_lambda_2_waitrequest(avm_lm18_const_lambda_2_waitrequest),
      .avm_lm18_const_lambda_2_readdata(avm_lm18_const_lambda_2_readdata),
      .avm_lm18_const_lambda_2_readdatavalid(avm_lm18_const_lambda_2_readdatavalid),
      .avm_lm18_const_lambda_2_burstcount(avm_lm18_const_lambda_2_burstcount),
      .avm_lm18_const_lambda_2_writeack(avm_lm18_const_lambda_2_writeack),
      // AVM avm_lm9_const_lambda_2
      .avm_lm9_const_lambda_2_enable(avm_lm9_const_lambda_2_enable),
      .avm_lm9_const_lambda_2_read(avm_lm9_const_lambda_2_read),
      .avm_lm9_const_lambda_2_write(avm_lm9_const_lambda_2_write),
      .avm_lm9_const_lambda_2_address(avm_lm9_const_lambda_2_address),
      .avm_lm9_const_lambda_2_writedata(avm_lm9_const_lambda_2_writedata),
      .avm_lm9_const_lambda_2_byteenable(avm_lm9_const_lambda_2_byteenable),
      .avm_lm9_const_lambda_2_waitrequest(avm_lm9_const_lambda_2_waitrequest),
      .avm_lm9_const_lambda_2_readdata(avm_lm9_const_lambda_2_readdata),
      .avm_lm9_const_lambda_2_readdatavalid(avm_lm9_const_lambda_2_readdatavalid),
      .avm_lm9_const_lambda_2_burstcount(avm_lm9_const_lambda_2_burstcount),
      .avm_lm9_const_lambda_2_writeack(avm_lm9_const_lambda_2_writeack),
      // AVM avm_memdep_4_const_lambda_2
      .avm_memdep_4_const_lambda_2_enable(avm_memdep_4_const_lambda_2_enable),
      .avm_memdep_4_const_lambda_2_read(avm_memdep_4_const_lambda_2_read),
      .avm_memdep_4_const_lambda_2_write(avm_memdep_4_const_lambda_2_write),
      .avm_memdep_4_const_lambda_2_address(avm_memdep_4_const_lambda_2_address),
      .avm_memdep_4_const_lambda_2_writedata(avm_memdep_4_const_lambda_2_writedata),
      .avm_memdep_4_const_lambda_2_byteenable(avm_memdep_4_const_lambda_2_byteenable),
      .avm_memdep_4_const_lambda_2_waitrequest(avm_memdep_4_const_lambda_2_waitrequest),
      .avm_memdep_4_const_lambda_2_readdata(avm_memdep_4_const_lambda_2_readdata),
      .avm_memdep_4_const_lambda_2_readdatavalid(avm_memdep_4_const_lambda_2_readdatavalid),
      .avm_memdep_4_const_lambda_2_burstcount(avm_memdep_4_const_lambda_2_burstcount),
      .avm_memdep_4_const_lambda_2_writeack(avm_memdep_4_const_lambda_2_writeack),
      // AVM avm_memdep_5_const_lambda_2
      .avm_memdep_5_const_lambda_2_enable(avm_memdep_5_const_lambda_2_enable),
      .avm_memdep_5_const_lambda_2_read(avm_memdep_5_const_lambda_2_read),
      .avm_memdep_5_const_lambda_2_write(avm_memdep_5_const_lambda_2_write),
      .avm_memdep_5_const_lambda_2_address(avm_memdep_5_const_lambda_2_address),
      .avm_memdep_5_const_lambda_2_writedata(avm_memdep_5_const_lambda_2_writedata),
      .avm_memdep_5_const_lambda_2_byteenable(avm_memdep_5_const_lambda_2_byteenable),
      .avm_memdep_5_const_lambda_2_waitrequest(avm_memdep_5_const_lambda_2_waitrequest),
      .avm_memdep_5_const_lambda_2_readdata(avm_memdep_5_const_lambda_2_readdata),
      .avm_memdep_5_const_lambda_2_readdatavalid(avm_memdep_5_const_lambda_2_readdatavalid),
      .avm_memdep_5_const_lambda_2_burstcount(avm_memdep_5_const_lambda_2_burstcount),
      .avm_memdep_5_const_lambda_2_writeack(avm_memdep_5_const_lambda_2_writeack),
      // AVM avm_unnamed_const_lambda_23_const_lambda_2
      .avm_unnamed_const_lambda_23_const_lambda_2_enable(avm_unnamed_const_lambda_23_const_lambda_2_enable),
      .avm_unnamed_const_lambda_23_const_lambda_2_read(avm_unnamed_const_lambda_23_const_lambda_2_read),
      .avm_unnamed_const_lambda_23_const_lambda_2_write(avm_unnamed_const_lambda_23_const_lambda_2_write),
      .avm_unnamed_const_lambda_23_const_lambda_2_address(avm_unnamed_const_lambda_23_const_lambda_2_address),
      .avm_unnamed_const_lambda_23_const_lambda_2_writedata(avm_unnamed_const_lambda_23_const_lambda_2_writedata),
      .avm_unnamed_const_lambda_23_const_lambda_2_byteenable(avm_unnamed_const_lambda_23_const_lambda_2_byteenable),
      .avm_unnamed_const_lambda_23_const_lambda_2_waitrequest(avm_unnamed_const_lambda_23_const_lambda_2_waitrequest),
      .avm_unnamed_const_lambda_23_const_lambda_2_readdata(avm_unnamed_const_lambda_23_const_lambda_2_readdata),
      .avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid(avm_unnamed_const_lambda_23_const_lambda_2_readdatavalid),
      .avm_unnamed_const_lambda_23_const_lambda_2_burstcount(avm_unnamed_const_lambda_23_const_lambda_2_burstcount),
      .avm_unnamed_const_lambda_23_const_lambda_2_writeack(avm_unnamed_const_lambda_23_const_lambda_2_writeack),
      // AVM avm_lm22189_const_lambda_2
      .avm_lm22189_const_lambda_2_enable(avm_lm22189_const_lambda_2_enable),
      .avm_lm22189_const_lambda_2_read(avm_lm22189_const_lambda_2_read),
      .avm_lm22189_const_lambda_2_write(avm_lm22189_const_lambda_2_write),
      .avm_lm22189_const_lambda_2_address(avm_lm22189_const_lambda_2_address),
      .avm_lm22189_const_lambda_2_writedata(avm_lm22189_const_lambda_2_writedata),
      .avm_lm22189_const_lambda_2_byteenable(avm_lm22189_const_lambda_2_byteenable),
      .avm_lm22189_const_lambda_2_waitrequest(avm_lm22189_const_lambda_2_waitrequest),
      .avm_lm22189_const_lambda_2_readdata(avm_lm22189_const_lambda_2_readdata),
      .avm_lm22189_const_lambda_2_readdatavalid(avm_lm22189_const_lambda_2_readdatavalid),
      .avm_lm22189_const_lambda_2_burstcount(avm_lm22189_const_lambda_2_burstcount),
      .avm_lm22189_const_lambda_2_writeack(avm_lm22189_const_lambda_2_writeack),
      // AVM avm_memdep_388_const_lambda_2
      .avm_memdep_388_const_lambda_2_enable(avm_memdep_388_const_lambda_2_enable),
      .avm_memdep_388_const_lambda_2_read(avm_memdep_388_const_lambda_2_read),
      .avm_memdep_388_const_lambda_2_write(avm_memdep_388_const_lambda_2_write),
      .avm_memdep_388_const_lambda_2_address(avm_memdep_388_const_lambda_2_address),
      .avm_memdep_388_const_lambda_2_writedata(avm_memdep_388_const_lambda_2_writedata),
      .avm_memdep_388_const_lambda_2_byteenable(avm_memdep_388_const_lambda_2_byteenable),
      .avm_memdep_388_const_lambda_2_waitrequest(avm_memdep_388_const_lambda_2_waitrequest),
      .avm_memdep_388_const_lambda_2_readdata(avm_memdep_388_const_lambda_2_readdata),
      .avm_memdep_388_const_lambda_2_readdatavalid(avm_memdep_388_const_lambda_2_readdatavalid),
      .avm_memdep_388_const_lambda_2_burstcount(avm_memdep_388_const_lambda_2_burstcount),
      .avm_memdep_388_const_lambda_2_writeack(avm_memdep_388_const_lambda_2_writeack),
      // AVM avm_lm287_const_lambda_2
      .avm_lm287_const_lambda_2_enable(avm_lm287_const_lambda_2_enable),
      .avm_lm287_const_lambda_2_read(avm_lm287_const_lambda_2_read),
      .avm_lm287_const_lambda_2_write(avm_lm287_const_lambda_2_write),
      .avm_lm287_const_lambda_2_address(avm_lm287_const_lambda_2_address),
      .avm_lm287_const_lambda_2_writedata(avm_lm287_const_lambda_2_writedata),
      .avm_lm287_const_lambda_2_byteenable(avm_lm287_const_lambda_2_byteenable),
      .avm_lm287_const_lambda_2_waitrequest(avm_lm287_const_lambda_2_waitrequest),
      .avm_lm287_const_lambda_2_readdata(avm_lm287_const_lambda_2_readdata),
      .avm_lm287_const_lambda_2_readdatavalid(avm_lm287_const_lambda_2_readdatavalid),
      .avm_lm287_const_lambda_2_burstcount(avm_lm287_const_lambda_2_burstcount),
      .avm_lm287_const_lambda_2_writeack(avm_lm287_const_lambda_2_writeack),
      // AVM avm_memdep_86_const_lambda_2
      .avm_memdep_86_const_lambda_2_enable(avm_memdep_86_const_lambda_2_enable),
      .avm_memdep_86_const_lambda_2_read(avm_memdep_86_const_lambda_2_read),
      .avm_memdep_86_const_lambda_2_write(avm_memdep_86_const_lambda_2_write),
      .avm_memdep_86_const_lambda_2_address(avm_memdep_86_const_lambda_2_address),
      .avm_memdep_86_const_lambda_2_writedata(avm_memdep_86_const_lambda_2_writedata),
      .avm_memdep_86_const_lambda_2_byteenable(avm_memdep_86_const_lambda_2_byteenable),
      .avm_memdep_86_const_lambda_2_waitrequest(avm_memdep_86_const_lambda_2_waitrequest),
      .avm_memdep_86_const_lambda_2_readdata(avm_memdep_86_const_lambda_2_readdata),
      .avm_memdep_86_const_lambda_2_readdatavalid(avm_memdep_86_const_lambda_2_readdatavalid),
      .avm_memdep_86_const_lambda_2_burstcount(avm_memdep_86_const_lambda_2_burstcount),
      .avm_memdep_86_const_lambda_2_writeack(avm_memdep_86_const_lambda_2_writeack)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_top_wrapper_0
/////////////////////////////////////////////////////////////////
module const_lambda_top_wrapper_0
(
   input logic start,
   input logic [511:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   // AVM avm_lm3_const_lambda
   output logic avm_lm3_const_lambda_enable,
   output logic avm_lm3_const_lambda_read,
   output logic avm_lm3_const_lambda_write,
   output logic [34:0] avm_lm3_const_lambda_address,
   output logic [63:0] avm_lm3_const_lambda_writedata,
   output logic [7:0] avm_lm3_const_lambda_byteenable,
   input logic avm_lm3_const_lambda_waitrequest,
   input logic [63:0] avm_lm3_const_lambda_readdata,
   input logic avm_lm3_const_lambda_readdatavalid,
   output logic avm_lm3_const_lambda_burstcount,
   input logic avm_lm3_const_lambda_writeack,
   // AVM avm_lm_const_lambda
   output logic avm_lm_const_lambda_enable,
   output logic avm_lm_const_lambda_read,
   output logic avm_lm_const_lambda_write,
   output logic [34:0] avm_lm_const_lambda_address,
   output logic [63:0] avm_lm_const_lambda_writedata,
   output logic [7:0] avm_lm_const_lambda_byteenable,
   input logic avm_lm_const_lambda_waitrequest,
   input logic [63:0] avm_lm_const_lambda_readdata,
   input logic avm_lm_const_lambda_readdatavalid,
   output logic avm_lm_const_lambda_burstcount,
   input logic avm_lm_const_lambda_writeack,
   // AVM avm_unnamed_const_lambda2_const_lambda
   output logic avm_unnamed_const_lambda2_const_lambda_enable,
   output logic avm_unnamed_const_lambda2_const_lambda_read,
   output logic avm_unnamed_const_lambda2_const_lambda_write,
   output logic [34:0] avm_unnamed_const_lambda2_const_lambda_address,
   output logic [63:0] avm_unnamed_const_lambda2_const_lambda_writedata,
   output logic [7:0] avm_unnamed_const_lambda2_const_lambda_byteenable,
   input logic avm_unnamed_const_lambda2_const_lambda_waitrequest,
   input logic [63:0] avm_unnamed_const_lambda2_const_lambda_readdata,
   input logic avm_unnamed_const_lambda2_const_lambda_readdatavalid,
   output logic avm_unnamed_const_lambda2_const_lambda_burstcount,
   input logic avm_unnamed_const_lambda2_const_lambda_writeack
);
   // INST kernel of const_lambda_function_wrapper
   const_lambda_function_wrapper kernel
   (
      .local_router_hang(),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm3_const_lambda
      .avm_lm3_const_lambda_enable(avm_lm3_const_lambda_enable),
      .avm_lm3_const_lambda_read(avm_lm3_const_lambda_read),
      .avm_lm3_const_lambda_write(avm_lm3_const_lambda_write),
      .avm_lm3_const_lambda_address(avm_lm3_const_lambda_address),
      .avm_lm3_const_lambda_writedata(avm_lm3_const_lambda_writedata),
      .avm_lm3_const_lambda_byteenable(avm_lm3_const_lambda_byteenable),
      .avm_lm3_const_lambda_waitrequest(avm_lm3_const_lambda_waitrequest),
      .avm_lm3_const_lambda_readdata(avm_lm3_const_lambda_readdata),
      .avm_lm3_const_lambda_readdatavalid(avm_lm3_const_lambda_readdatavalid),
      .avm_lm3_const_lambda_burstcount(avm_lm3_const_lambda_burstcount),
      .avm_lm3_const_lambda_writeack(avm_lm3_const_lambda_writeack),
      // AVM avm_lm_const_lambda
      .avm_lm_const_lambda_enable(avm_lm_const_lambda_enable),
      .avm_lm_const_lambda_read(avm_lm_const_lambda_read),
      .avm_lm_const_lambda_write(avm_lm_const_lambda_write),
      .avm_lm_const_lambda_address(avm_lm_const_lambda_address),
      .avm_lm_const_lambda_writedata(avm_lm_const_lambda_writedata),
      .avm_lm_const_lambda_byteenable(avm_lm_const_lambda_byteenable),
      .avm_lm_const_lambda_waitrequest(avm_lm_const_lambda_waitrequest),
      .avm_lm_const_lambda_readdata(avm_lm_const_lambda_readdata),
      .avm_lm_const_lambda_readdatavalid(avm_lm_const_lambda_readdatavalid),
      .avm_lm_const_lambda_burstcount(avm_lm_const_lambda_burstcount),
      .avm_lm_const_lambda_writeack(avm_lm_const_lambda_writeack),
      // AVM avm_unnamed_const_lambda2_const_lambda
      .avm_unnamed_const_lambda2_const_lambda_enable(avm_unnamed_const_lambda2_const_lambda_enable),
      .avm_unnamed_const_lambda2_const_lambda_read(avm_unnamed_const_lambda2_const_lambda_read),
      .avm_unnamed_const_lambda2_const_lambda_write(avm_unnamed_const_lambda2_const_lambda_write),
      .avm_unnamed_const_lambda2_const_lambda_address(avm_unnamed_const_lambda2_const_lambda_address),
      .avm_unnamed_const_lambda2_const_lambda_writedata(avm_unnamed_const_lambda2_const_lambda_writedata),
      .avm_unnamed_const_lambda2_const_lambda_byteenable(avm_unnamed_const_lambda2_const_lambda_byteenable),
      .avm_unnamed_const_lambda2_const_lambda_waitrequest(avm_unnamed_const_lambda2_const_lambda_waitrequest),
      .avm_unnamed_const_lambda2_const_lambda_readdata(avm_unnamed_const_lambda2_const_lambda_readdata),
      .avm_unnamed_const_lambda2_const_lambda_readdatavalid(avm_unnamed_const_lambda2_const_lambda_readdatavalid),
      .avm_unnamed_const_lambda2_const_lambda_burstcount(avm_unnamed_const_lambda2_const_lambda_burstcount),
      .avm_unnamed_const_lambda2_const_lambda_writeack(avm_unnamed_const_lambda2_const_lambda_writeack)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_1_top_wrapper_0
/////////////////////////////////////////////////////////////////
module const_lambda_1_top_wrapper_0
(
   input logic start,
   input logic [959:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   // AVM avm_lm4_const_lambda_1
   output logic avm_lm4_const_lambda_1_enable,
   output logic avm_lm4_const_lambda_1_read,
   output logic avm_lm4_const_lambda_1_write,
   output logic [34:0] avm_lm4_const_lambda_1_address,
   output logic [63:0] avm_lm4_const_lambda_1_writedata,
   output logic [7:0] avm_lm4_const_lambda_1_byteenable,
   input logic avm_lm4_const_lambda_1_waitrequest,
   input logic [63:0] avm_lm4_const_lambda_1_readdata,
   input logic avm_lm4_const_lambda_1_readdatavalid,
   output logic avm_lm4_const_lambda_1_burstcount,
   input logic avm_lm4_const_lambda_1_writeack,
   // AVM avm_lm_const_lambda_1
   output logic avm_lm_const_lambda_1_enable,
   output logic avm_lm_const_lambda_1_read,
   output logic avm_lm_const_lambda_1_write,
   output logic [34:0] avm_lm_const_lambda_1_address,
   output logic [63:0] avm_lm_const_lambda_1_writedata,
   output logic [7:0] avm_lm_const_lambda_1_byteenable,
   input logic avm_lm_const_lambda_1_waitrequest,
   input logic [63:0] avm_lm_const_lambda_1_readdata,
   input logic avm_lm_const_lambda_1_readdatavalid,
   output logic avm_lm_const_lambda_1_burstcount,
   input logic avm_lm_const_lambda_1_writeack,
   // AVM avm_memdep_const_lambda_1
   output logic avm_memdep_const_lambda_1_enable,
   output logic avm_memdep_const_lambda_1_read,
   output logic avm_memdep_const_lambda_1_write,
   output logic [34:0] avm_memdep_const_lambda_1_address,
   output logic [63:0] avm_memdep_const_lambda_1_writedata,
   output logic [7:0] avm_memdep_const_lambda_1_byteenable,
   input logic avm_memdep_const_lambda_1_waitrequest,
   input logic [63:0] avm_memdep_const_lambda_1_readdata,
   input logic avm_memdep_const_lambda_1_readdatavalid,
   output logic avm_memdep_const_lambda_1_burstcount,
   input logic avm_memdep_const_lambda_1_writeack,
   // AVM avm_unnamed_const_lambda_11_const_lambda_1
   output logic avm_unnamed_const_lambda_11_const_lambda_1_enable,
   output logic avm_unnamed_const_lambda_11_const_lambda_1_read,
   output logic avm_unnamed_const_lambda_11_const_lambda_1_write,
   output logic [34:0] avm_unnamed_const_lambda_11_const_lambda_1_address,
   output logic [63:0] avm_unnamed_const_lambda_11_const_lambda_1_writedata,
   output logic [7:0] avm_unnamed_const_lambda_11_const_lambda_1_byteenable,
   input logic avm_unnamed_const_lambda_11_const_lambda_1_waitrequest,
   input logic [63:0] avm_unnamed_const_lambda_11_const_lambda_1_readdata,
   input logic avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid,
   output logic avm_unnamed_const_lambda_11_const_lambda_1_burstcount,
   input logic avm_unnamed_const_lambda_11_const_lambda_1_writeack
);
   // INST kernel of const_lambda_1_function_wrapper
   const_lambda_1_function_wrapper kernel
   (
      .local_router_hang(),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm4_const_lambda_1
      .avm_lm4_const_lambda_1_enable(avm_lm4_const_lambda_1_enable),
      .avm_lm4_const_lambda_1_read(avm_lm4_const_lambda_1_read),
      .avm_lm4_const_lambda_1_write(avm_lm4_const_lambda_1_write),
      .avm_lm4_const_lambda_1_address(avm_lm4_const_lambda_1_address),
      .avm_lm4_const_lambda_1_writedata(avm_lm4_const_lambda_1_writedata),
      .avm_lm4_const_lambda_1_byteenable(avm_lm4_const_lambda_1_byteenable),
      .avm_lm4_const_lambda_1_waitrequest(avm_lm4_const_lambda_1_waitrequest),
      .avm_lm4_const_lambda_1_readdata(avm_lm4_const_lambda_1_readdata),
      .avm_lm4_const_lambda_1_readdatavalid(avm_lm4_const_lambda_1_readdatavalid),
      .avm_lm4_const_lambda_1_burstcount(avm_lm4_const_lambda_1_burstcount),
      .avm_lm4_const_lambda_1_writeack(avm_lm4_const_lambda_1_writeack),
      // AVM avm_lm_const_lambda_1
      .avm_lm_const_lambda_1_enable(avm_lm_const_lambda_1_enable),
      .avm_lm_const_lambda_1_read(avm_lm_const_lambda_1_read),
      .avm_lm_const_lambda_1_write(avm_lm_const_lambda_1_write),
      .avm_lm_const_lambda_1_address(avm_lm_const_lambda_1_address),
      .avm_lm_const_lambda_1_writedata(avm_lm_const_lambda_1_writedata),
      .avm_lm_const_lambda_1_byteenable(avm_lm_const_lambda_1_byteenable),
      .avm_lm_const_lambda_1_waitrequest(avm_lm_const_lambda_1_waitrequest),
      .avm_lm_const_lambda_1_readdata(avm_lm_const_lambda_1_readdata),
      .avm_lm_const_lambda_1_readdatavalid(avm_lm_const_lambda_1_readdatavalid),
      .avm_lm_const_lambda_1_burstcount(avm_lm_const_lambda_1_burstcount),
      .avm_lm_const_lambda_1_writeack(avm_lm_const_lambda_1_writeack),
      // AVM avm_memdep_const_lambda_1
      .avm_memdep_const_lambda_1_enable(avm_memdep_const_lambda_1_enable),
      .avm_memdep_const_lambda_1_read(avm_memdep_const_lambda_1_read),
      .avm_memdep_const_lambda_1_write(avm_memdep_const_lambda_1_write),
      .avm_memdep_const_lambda_1_address(avm_memdep_const_lambda_1_address),
      .avm_memdep_const_lambda_1_writedata(avm_memdep_const_lambda_1_writedata),
      .avm_memdep_const_lambda_1_byteenable(avm_memdep_const_lambda_1_byteenable),
      .avm_memdep_const_lambda_1_waitrequest(avm_memdep_const_lambda_1_waitrequest),
      .avm_memdep_const_lambda_1_readdata(avm_memdep_const_lambda_1_readdata),
      .avm_memdep_const_lambda_1_readdatavalid(avm_memdep_const_lambda_1_readdatavalid),
      .avm_memdep_const_lambda_1_burstcount(avm_memdep_const_lambda_1_burstcount),
      .avm_memdep_const_lambda_1_writeack(avm_memdep_const_lambda_1_writeack),
      // AVM avm_unnamed_const_lambda_11_const_lambda_1
      .avm_unnamed_const_lambda_11_const_lambda_1_enable(avm_unnamed_const_lambda_11_const_lambda_1_enable),
      .avm_unnamed_const_lambda_11_const_lambda_1_read(avm_unnamed_const_lambda_11_const_lambda_1_read),
      .avm_unnamed_const_lambda_11_const_lambda_1_write(avm_unnamed_const_lambda_11_const_lambda_1_write),
      .avm_unnamed_const_lambda_11_const_lambda_1_address(avm_unnamed_const_lambda_11_const_lambda_1_address),
      .avm_unnamed_const_lambda_11_const_lambda_1_writedata(avm_unnamed_const_lambda_11_const_lambda_1_writedata),
      .avm_unnamed_const_lambda_11_const_lambda_1_byteenable(avm_unnamed_const_lambda_11_const_lambda_1_byteenable),
      .avm_unnamed_const_lambda_11_const_lambda_1_waitrequest(avm_unnamed_const_lambda_11_const_lambda_1_waitrequest),
      .avm_unnamed_const_lambda_11_const_lambda_1_readdata(avm_unnamed_const_lambda_11_const_lambda_1_readdata),
      .avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid(avm_unnamed_const_lambda_11_const_lambda_1_readdatavalid),
      .avm_unnamed_const_lambda_11_const_lambda_1_burstcount(avm_unnamed_const_lambda_11_const_lambda_1_burstcount),
      .avm_unnamed_const_lambda_11_const_lambda_1_writeack(avm_unnamed_const_lambda_11_const_lambda_1_writeack)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE const_lambda_4_top_wrapper_0
/////////////////////////////////////////////////////////////////
module const_lambda_4_top_wrapper_0
(
   input logic start,
   input logic [1439:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   // AVM avm_lm1_const_lambda_4
   output logic avm_lm1_const_lambda_4_enable,
   output logic avm_lm1_const_lambda_4_read,
   output logic avm_lm1_const_lambda_4_write,
   output logic [34:0] avm_lm1_const_lambda_4_address,
   output logic [63:0] avm_lm1_const_lambda_4_writedata,
   output logic [7:0] avm_lm1_const_lambda_4_byteenable,
   input logic avm_lm1_const_lambda_4_waitrequest,
   input logic [63:0] avm_lm1_const_lambda_4_readdata,
   input logic avm_lm1_const_lambda_4_readdatavalid,
   output logic avm_lm1_const_lambda_4_burstcount,
   input logic avm_lm1_const_lambda_4_writeack,
   // AVM avm_lm_const_lambda_4
   output logic avm_lm_const_lambda_4_enable,
   output logic avm_lm_const_lambda_4_read,
   output logic avm_lm_const_lambda_4_write,
   output logic [34:0] avm_lm_const_lambda_4_address,
   output logic [63:0] avm_lm_const_lambda_4_writedata,
   output logic [7:0] avm_lm_const_lambda_4_byteenable,
   input logic avm_lm_const_lambda_4_waitrequest,
   input logic [63:0] avm_lm_const_lambda_4_readdata,
   input logic avm_lm_const_lambda_4_readdatavalid,
   output logic avm_lm_const_lambda_4_burstcount,
   input logic avm_lm_const_lambda_4_writeack,
   // AVM avm_unnamed_const_lambda_40_const_lambda_4
   output logic avm_unnamed_const_lambda_40_const_lambda_4_enable,
   output logic avm_unnamed_const_lambda_40_const_lambda_4_read,
   output logic avm_unnamed_const_lambda_40_const_lambda_4_write,
   output logic [34:0] avm_unnamed_const_lambda_40_const_lambda_4_address,
   output logic [63:0] avm_unnamed_const_lambda_40_const_lambda_4_writedata,
   output logic [7:0] avm_unnamed_const_lambda_40_const_lambda_4_byteenable,
   input logic avm_unnamed_const_lambda_40_const_lambda_4_waitrequest,
   input logic [63:0] avm_unnamed_const_lambda_40_const_lambda_4_readdata,
   input logic avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid,
   output logic avm_unnamed_const_lambda_40_const_lambda_4_burstcount,
   input logic avm_unnamed_const_lambda_40_const_lambda_4_writeack,
   // AVM avm_unnamed_const_lambda_43_const_lambda_4
   output logic avm_unnamed_const_lambda_43_const_lambda_4_enable,
   output logic avm_unnamed_const_lambda_43_const_lambda_4_read,
   output logic avm_unnamed_const_lambda_43_const_lambda_4_write,
   output logic [34:0] avm_unnamed_const_lambda_43_const_lambda_4_address,
   output logic [63:0] avm_unnamed_const_lambda_43_const_lambda_4_writedata,
   output logic [7:0] avm_unnamed_const_lambda_43_const_lambda_4_byteenable,
   input logic avm_unnamed_const_lambda_43_const_lambda_4_waitrequest,
   input logic [63:0] avm_unnamed_const_lambda_43_const_lambda_4_readdata,
   input logic avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid,
   output logic avm_unnamed_const_lambda_43_const_lambda_4_burstcount,
   input logic avm_unnamed_const_lambda_43_const_lambda_4_writeack
);
   // INST kernel of const_lambda_4_function_wrapper
   const_lambda_4_function_wrapper kernel
   (
      .local_router_hang(),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      // AVM avm_lm1_const_lambda_4
      .avm_lm1_const_lambda_4_enable(avm_lm1_const_lambda_4_enable),
      .avm_lm1_const_lambda_4_read(avm_lm1_const_lambda_4_read),
      .avm_lm1_const_lambda_4_write(avm_lm1_const_lambda_4_write),
      .avm_lm1_const_lambda_4_address(avm_lm1_const_lambda_4_address),
      .avm_lm1_const_lambda_4_writedata(avm_lm1_const_lambda_4_writedata),
      .avm_lm1_const_lambda_4_byteenable(avm_lm1_const_lambda_4_byteenable),
      .avm_lm1_const_lambda_4_waitrequest(avm_lm1_const_lambda_4_waitrequest),
      .avm_lm1_const_lambda_4_readdata(avm_lm1_const_lambda_4_readdata),
      .avm_lm1_const_lambda_4_readdatavalid(avm_lm1_const_lambda_4_readdatavalid),
      .avm_lm1_const_lambda_4_burstcount(avm_lm1_const_lambda_4_burstcount),
      .avm_lm1_const_lambda_4_writeack(avm_lm1_const_lambda_4_writeack),
      // AVM avm_lm_const_lambda_4
      .avm_lm_const_lambda_4_enable(avm_lm_const_lambda_4_enable),
      .avm_lm_const_lambda_4_read(avm_lm_const_lambda_4_read),
      .avm_lm_const_lambda_4_write(avm_lm_const_lambda_4_write),
      .avm_lm_const_lambda_4_address(avm_lm_const_lambda_4_address),
      .avm_lm_const_lambda_4_writedata(avm_lm_const_lambda_4_writedata),
      .avm_lm_const_lambda_4_byteenable(avm_lm_const_lambda_4_byteenable),
      .avm_lm_const_lambda_4_waitrequest(avm_lm_const_lambda_4_waitrequest),
      .avm_lm_const_lambda_4_readdata(avm_lm_const_lambda_4_readdata),
      .avm_lm_const_lambda_4_readdatavalid(avm_lm_const_lambda_4_readdatavalid),
      .avm_lm_const_lambda_4_burstcount(avm_lm_const_lambda_4_burstcount),
      .avm_lm_const_lambda_4_writeack(avm_lm_const_lambda_4_writeack),
      // AVM avm_unnamed_const_lambda_40_const_lambda_4
      .avm_unnamed_const_lambda_40_const_lambda_4_enable(avm_unnamed_const_lambda_40_const_lambda_4_enable),
      .avm_unnamed_const_lambda_40_const_lambda_4_read(avm_unnamed_const_lambda_40_const_lambda_4_read),
      .avm_unnamed_const_lambda_40_const_lambda_4_write(avm_unnamed_const_lambda_40_const_lambda_4_write),
      .avm_unnamed_const_lambda_40_const_lambda_4_address(avm_unnamed_const_lambda_40_const_lambda_4_address),
      .avm_unnamed_const_lambda_40_const_lambda_4_writedata(avm_unnamed_const_lambda_40_const_lambda_4_writedata),
      .avm_unnamed_const_lambda_40_const_lambda_4_byteenable(avm_unnamed_const_lambda_40_const_lambda_4_byteenable),
      .avm_unnamed_const_lambda_40_const_lambda_4_waitrequest(avm_unnamed_const_lambda_40_const_lambda_4_waitrequest),
      .avm_unnamed_const_lambda_40_const_lambda_4_readdata(avm_unnamed_const_lambda_40_const_lambda_4_readdata),
      .avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid(avm_unnamed_const_lambda_40_const_lambda_4_readdatavalid),
      .avm_unnamed_const_lambda_40_const_lambda_4_burstcount(avm_unnamed_const_lambda_40_const_lambda_4_burstcount),
      .avm_unnamed_const_lambda_40_const_lambda_4_writeack(avm_unnamed_const_lambda_40_const_lambda_4_writeack),
      // AVM avm_unnamed_const_lambda_43_const_lambda_4
      .avm_unnamed_const_lambda_43_const_lambda_4_enable(avm_unnamed_const_lambda_43_const_lambda_4_enable),
      .avm_unnamed_const_lambda_43_const_lambda_4_read(avm_unnamed_const_lambda_43_const_lambda_4_read),
      .avm_unnamed_const_lambda_43_const_lambda_4_write(avm_unnamed_const_lambda_43_const_lambda_4_write),
      .avm_unnamed_const_lambda_43_const_lambda_4_address(avm_unnamed_const_lambda_43_const_lambda_4_address),
      .avm_unnamed_const_lambda_43_const_lambda_4_writedata(avm_unnamed_const_lambda_43_const_lambda_4_writedata),
      .avm_unnamed_const_lambda_43_const_lambda_4_byteenable(avm_unnamed_const_lambda_43_const_lambda_4_byteenable),
      .avm_unnamed_const_lambda_43_const_lambda_4_waitrequest(avm_unnamed_const_lambda_43_const_lambda_4_waitrequest),
      .avm_unnamed_const_lambda_43_const_lambda_4_readdata(avm_unnamed_const_lambda_43_const_lambda_4_readdata),
      .avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid(avm_unnamed_const_lambda_43_const_lambda_4_readdatavalid),
      .avm_unnamed_const_lambda_43_const_lambda_4_burstcount(avm_unnamed_const_lambda_43_const_lambda_4_burstcount),
      .avm_unnamed_const_lambda_43_const_lambda_4_writeack(avm_unnamed_const_lambda_43_const_lambda_4_writeack)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE paralingam_report_di_ic_10950356974493103552
/////////////////////////////////////////////////////////////////
module paralingam_report_di_ic_10950356974493103552
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [20:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [20:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(21),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(21),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(21),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(21),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(21),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(21),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(6),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(0),
         .SYNCHRONIZE_RESET(1)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE paralingam_report_di_ic_8241268795270747462
/////////////////////////////////////////////////////////////////
module paralingam_report_di_ic_8241268795270747462
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [20:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [20:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(21),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(21),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(21),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(21),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(21),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(21),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(6),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(0),
         .SYNCHRONIZE_RESET(1)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cra_ring_wrapper
/////////////////////////////////////////////////////////////////
module cra_ring_wrapper
(
   input logic clock,
   input logic resetn,
   // AVS csr_ring_root_avs
   input logic csr_ring_root_avs_enable,
   input logic csr_ring_root_avs_read,
   input logic csr_ring_root_avs_write,
   input logic [8:0] csr_ring_root_avs_address,
   input logic [63:0] csr_ring_root_avs_writedata,
   input logic [7:0] csr_ring_root_avs_byteenable,
   output logic csr_ring_root_avs_waitrequest,
   output logic [63:0] csr_ring_root_avs_readdata,
   output logic csr_ring_root_avs_readdatavalid,
   // AVM cra_ring_avm_0
   output logic cra_ring_avm_0_enable,
   output logic cra_ring_avm_0_read,
   output logic cra_ring_avm_0_write,
   output logic [4:0] cra_ring_avm_0_address,
   output logic [63:0] cra_ring_avm_0_writedata,
   output logic [7:0] cra_ring_avm_0_byteenable,
   input logic [63:0] cra_ring_avm_0_readdata,
   input logic cra_ring_avm_0_readdatavalid,
   output logic cra_ring_avm_0_burstcount,
   // AVM cra_ring_avm_1
   output logic cra_ring_avm_1_enable,
   output logic cra_ring_avm_1_read,
   output logic cra_ring_avm_1_write,
   output logic [5:0] cra_ring_avm_1_address,
   output logic [63:0] cra_ring_avm_1_writedata,
   output logic [7:0] cra_ring_avm_1_byteenable,
   input logic [63:0] cra_ring_avm_1_readdata,
   input logic cra_ring_avm_1_readdatavalid,
   output logic cra_ring_avm_1_burstcount,
   // AVM cra_ring_avm_2
   output logic cra_ring_avm_2_enable,
   output logic cra_ring_avm_2_read,
   output logic cra_ring_avm_2_write,
   output logic [4:0] cra_ring_avm_2_address,
   output logic [63:0] cra_ring_avm_2_writedata,
   output logic [7:0] cra_ring_avm_2_byteenable,
   input logic [63:0] cra_ring_avm_2_readdata,
   input logic cra_ring_avm_2_readdatavalid,
   output logic cra_ring_avm_2_burstcount,
   // AVM cra_ring_avm_3
   output logic cra_ring_avm_3_enable,
   output logic cra_ring_avm_3_read,
   output logic cra_ring_avm_3_write,
   output logic [4:0] cra_ring_avm_3_address,
   output logic [63:0] cra_ring_avm_3_writedata,
   output logic [7:0] cra_ring_avm_3_byteenable,
   input logic [63:0] cra_ring_avm_3_readdata,
   input logic cra_ring_avm_3_readdatavalid,
   output logic cra_ring_avm_3_burstcount,
   // AVM cra_ring_avm_4
   output logic cra_ring_avm_4_enable,
   output logic cra_ring_avm_4_read,
   output logic cra_ring_avm_4_write,
   output logic [5:0] cra_ring_avm_4_address,
   output logic [63:0] cra_ring_avm_4_writedata,
   output logic [7:0] cra_ring_avm_4_byteenable,
   input logic [63:0] cra_ring_avm_4_readdata,
   input logic cra_ring_avm_4_readdatavalid,
   output logic cra_ring_avm_4_burstcount
);
   logic csr_ring_root_ring_in_wire_read;
   logic csr_ring_root_ring_in_wire_write;
   logic [8:0] csr_ring_root_ring_in_wire_addr;
   logic [63:0] csr_ring_root_ring_in_wire_data;
   logic [63:0] csr_ring_root_ring_in_wire_readdata;
   logic [7:0] csr_ring_root_ring_in_wire_byteena;
   logic csr_ring_root_ring_in_wire_datavalid;
   logic csr_ring_root_ring_out_wire_read;
   logic csr_ring_root_ring_out_wire_write;
   logic [8:0] csr_ring_root_ring_out_wire_addr;
   logic [63:0] csr_ring_root_ring_out_wire_data;
   logic [63:0] csr_ring_root_ring_out_wire_readdata;
   logic [7:0] csr_ring_root_ring_out_wire_byteena;
   logic csr_ring_root_ring_out_wire_datavalid;
   logic cra_ring_node_ring_out_wire_0_read;
   logic cra_ring_node_ring_out_wire_0_write;
   logic [8:0] cra_ring_node_ring_out_wire_0_addr;
   logic [63:0] cra_ring_node_ring_out_wire_0_data;
   logic [63:0] cra_ring_node_ring_out_wire_0_readdata;
   logic [7:0] cra_ring_node_ring_out_wire_0_byteena;
   logic cra_ring_node_ring_out_wire_0_datavalid;
   logic cra_ring_node_ring_out_wire_1_read;
   logic cra_ring_node_ring_out_wire_1_write;
   logic [8:0] cra_ring_node_ring_out_wire_1_addr;
   logic [63:0] cra_ring_node_ring_out_wire_1_data;
   logic [63:0] cra_ring_node_ring_out_wire_1_readdata;
   logic [7:0] cra_ring_node_ring_out_wire_1_byteena;
   logic cra_ring_node_ring_out_wire_1_datavalid;
   logic cra_ring_node_ring_out_wire_2_read;
   logic cra_ring_node_ring_out_wire_2_write;
   logic [8:0] cra_ring_node_ring_out_wire_2_addr;
   logic [63:0] cra_ring_node_ring_out_wire_2_data;
   logic [63:0] cra_ring_node_ring_out_wire_2_readdata;
   logic [7:0] cra_ring_node_ring_out_wire_2_byteena;
   logic cra_ring_node_ring_out_wire_2_datavalid;
   logic cra_ring_node_ring_out_wire_3_read;
   logic cra_ring_node_ring_out_wire_3_write;
   logic [8:0] cra_ring_node_ring_out_wire_3_addr;
   logic [63:0] cra_ring_node_ring_out_wire_3_data;
   logic [63:0] cra_ring_node_ring_out_wire_3_readdata;
   logic [7:0] cra_ring_node_ring_out_wire_3_byteena;
   logic cra_ring_node_ring_out_wire_3_datavalid;
   logic cra_ring_node_ring_out_wire_4_read;
   logic cra_ring_node_ring_out_wire_4_write;
   logic [8:0] cra_ring_node_ring_out_wire_4_addr;
   logic [63:0] cra_ring_node_ring_out_wire_4_data;
   logic [63:0] cra_ring_node_ring_out_wire_4_readdata;
   logic [7:0] cra_ring_node_ring_out_wire_4_byteena;
   logic cra_ring_node_ring_out_wire_4_datavalid;

   // INST cra_root of cra_ring_root
   cra_ring_root
   #(
      .ADDR_W(6),
      .AGENT_PORT_WAITREQUEST_ALLOWANCE(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .ASYNC_RESET(0),
      .DATA_W(64),
      .ID_W(3),
      .ROM_ENABLE(0),
      .ROM_EXT_W(0),
      .SYNCHRONIZE_RESET(1),
      .ZERO_LATENCY(0)
   )
   cra_root
   (
      // AVS avs
      .avs_enable(csr_ring_root_avs_enable),
      .avs_read(csr_ring_root_avs_read),
      .avs_write(csr_ring_root_avs_write),
      .avs_addr(csr_ring_root_avs_address),
      .avs_writedata(csr_ring_root_avs_writedata),
      .avs_byteena(csr_ring_root_avs_byteenable),
      .avs_waitrequest(csr_ring_root_avs_waitrequest),
      .avs_readdata(csr_ring_root_avs_readdata),
      .avs_readdatavalid(csr_ring_root_avs_readdatavalid),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_4_read),
      .ri_write(cra_ring_node_ring_out_wire_4_write),
      .ri_addr(cra_ring_node_ring_out_wire_4_addr),
      .ri_data(cra_ring_node_ring_out_wire_4_data),
      .ri_readdata(cra_ring_node_ring_out_wire_4_readdata),
      .ri_byteena(cra_ring_node_ring_out_wire_4_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_4_datavalid),
      // AVS ro
      .ro_read(csr_ring_root_ring_out_wire_read),
      .ro_write(csr_ring_root_ring_out_wire_write),
      .ro_addr(csr_ring_root_ring_out_wire_addr),
      .ro_data(csr_ring_root_ring_out_wire_data),
      .ro_readdata(csr_ring_root_ring_out_wire_readdata),
      .ro_byteena(csr_ring_root_ring_out_wire_byteena),
      .ro_datavalid(csr_ring_root_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST csr_ring_node_avm_wire_3_cra_ring_inst_0 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(0),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(3),
      .ID_W(3),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(1),
      .ZERO_LATENCY(0)
   )
   csr_ring_node_avm_wire_3_cra_ring_inst_0
   (
      // AVM avm
      .avm_enable(cra_ring_avm_0_enable),
      .avm_read(cra_ring_avm_0_read),
      .avm_write(cra_ring_avm_0_write),
      .avm_addr(cra_ring_avm_0_address),
      .avm_writedata(cra_ring_avm_0_writedata),
      .avm_byteena(cra_ring_avm_0_byteenable),
      .avm_readdata(cra_ring_avm_0_readdata),
      .avm_readdatavalid(cra_ring_avm_0_readdatavalid),
      .avm_burstcount(cra_ring_avm_0_burstcount),
      // AVS ri
      .ri_read(csr_ring_root_ring_out_wire_read),
      .ri_write(csr_ring_root_ring_out_wire_write),
      .ri_addr(csr_ring_root_ring_out_wire_addr),
      .ri_data(csr_ring_root_ring_out_wire_data),
      .ri_readdata(csr_ring_root_ring_out_wire_readdata),
      .ri_byteena(csr_ring_root_ring_out_wire_byteena),
      .ri_datavalid(csr_ring_root_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_0_read),
      .ro_write(cra_ring_node_ring_out_wire_0_write),
      .ro_addr(cra_ring_node_ring_out_wire_0_addr),
      .ro_data(cra_ring_node_ring_out_wire_0_data),
      .ro_readdata(cra_ring_node_ring_out_wire_0_readdata),
      .ro_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST csr_ring_node_avm_wire_2_cra_ring_inst_1 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(0),
      .CRA_ADDR_W(6),
      .DATA_W(64),
      .ID(2),
      .ID_W(3),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(1),
      .ZERO_LATENCY(0)
   )
   csr_ring_node_avm_wire_2_cra_ring_inst_1
   (
      // AVM avm
      .avm_enable(cra_ring_avm_1_enable),
      .avm_read(cra_ring_avm_1_read),
      .avm_write(cra_ring_avm_1_write),
      .avm_addr(cra_ring_avm_1_address),
      .avm_writedata(cra_ring_avm_1_writedata),
      .avm_byteena(cra_ring_avm_1_byteenable),
      .avm_readdata(cra_ring_avm_1_readdata),
      .avm_readdatavalid(cra_ring_avm_1_readdatavalid),
      .avm_burstcount(cra_ring_avm_1_burstcount),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_0_read),
      .ri_write(cra_ring_node_ring_out_wire_0_write),
      .ri_addr(cra_ring_node_ring_out_wire_0_addr),
      .ri_data(cra_ring_node_ring_out_wire_0_data),
      .ri_readdata(cra_ring_node_ring_out_wire_0_readdata),
      .ri_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_1_read),
      .ro_write(cra_ring_node_ring_out_wire_1_write),
      .ro_addr(cra_ring_node_ring_out_wire_1_addr),
      .ro_data(cra_ring_node_ring_out_wire_1_data),
      .ro_readdata(cra_ring_node_ring_out_wire_1_readdata),
      .ro_byteena(cra_ring_node_ring_out_wire_1_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_1_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST csr_ring_node_avm_wire_0_cra_ring_inst_2 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(0),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(0),
      .ID_W(3),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(1),
      .ZERO_LATENCY(0)
   )
   csr_ring_node_avm_wire_0_cra_ring_inst_2
   (
      // AVM avm
      .avm_enable(cra_ring_avm_2_enable),
      .avm_read(cra_ring_avm_2_read),
      .avm_write(cra_ring_avm_2_write),
      .avm_addr(cra_ring_avm_2_address),
      .avm_writedata(cra_ring_avm_2_writedata),
      .avm_byteena(cra_ring_avm_2_byteenable),
      .avm_readdata(cra_ring_avm_2_readdata),
      .avm_readdatavalid(cra_ring_avm_2_readdatavalid),
      .avm_burstcount(cra_ring_avm_2_burstcount),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_1_read),
      .ri_write(cra_ring_node_ring_out_wire_1_write),
      .ri_addr(cra_ring_node_ring_out_wire_1_addr),
      .ri_data(cra_ring_node_ring_out_wire_1_data),
      .ri_readdata(cra_ring_node_ring_out_wire_1_readdata),
      .ri_byteena(cra_ring_node_ring_out_wire_1_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_1_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_2_read),
      .ro_write(cra_ring_node_ring_out_wire_2_write),
      .ro_addr(cra_ring_node_ring_out_wire_2_addr),
      .ro_data(cra_ring_node_ring_out_wire_2_data),
      .ro_readdata(cra_ring_node_ring_out_wire_2_readdata),
      .ro_byteena(cra_ring_node_ring_out_wire_2_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_2_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST csr_ring_node_avm_wire_1_cra_ring_inst_3 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(0),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(1),
      .ID_W(3),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(1),
      .ZERO_LATENCY(0)
   )
   csr_ring_node_avm_wire_1_cra_ring_inst_3
   (
      // AVM avm
      .avm_enable(cra_ring_avm_3_enable),
      .avm_read(cra_ring_avm_3_read),
      .avm_write(cra_ring_avm_3_write),
      .avm_addr(cra_ring_avm_3_address),
      .avm_writedata(cra_ring_avm_3_writedata),
      .avm_byteena(cra_ring_avm_3_byteenable),
      .avm_readdata(cra_ring_avm_3_readdata),
      .avm_readdatavalid(cra_ring_avm_3_readdatavalid),
      .avm_burstcount(cra_ring_avm_3_burstcount),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_2_read),
      .ri_write(cra_ring_node_ring_out_wire_2_write),
      .ri_addr(cra_ring_node_ring_out_wire_2_addr),
      .ri_data(cra_ring_node_ring_out_wire_2_data),
      .ri_readdata(cra_ring_node_ring_out_wire_2_readdata),
      .ri_byteena(cra_ring_node_ring_out_wire_2_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_2_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_3_read),
      .ro_write(cra_ring_node_ring_out_wire_3_write),
      .ro_addr(cra_ring_node_ring_out_wire_3_addr),
      .ro_data(cra_ring_node_ring_out_wire_3_data),
      .ro_readdata(cra_ring_node_ring_out_wire_3_readdata),
      .ro_byteena(cra_ring_node_ring_out_wire_3_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_3_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST csr_ring_node_avm_wire_4_cra_ring_inst_4 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(0),
      .CRA_ADDR_W(6),
      .DATA_W(64),
      .ID(4),
      .ID_W(3),
      .RING_ADDR_W(6),
      .SYNCHRONIZE_RESET(1),
      .ZERO_LATENCY(0)
   )
   csr_ring_node_avm_wire_4_cra_ring_inst_4
   (
      // AVM avm
      .avm_enable(cra_ring_avm_4_enable),
      .avm_read(cra_ring_avm_4_read),
      .avm_write(cra_ring_avm_4_write),
      .avm_addr(cra_ring_avm_4_address),
      .avm_writedata(cra_ring_avm_4_writedata),
      .avm_byteena(cra_ring_avm_4_byteenable),
      .avm_readdata(cra_ring_avm_4_readdata),
      .avm_readdatavalid(cra_ring_avm_4_readdatavalid),
      .avm_burstcount(cra_ring_avm_4_burstcount),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_3_read),
      .ri_write(cra_ring_node_ring_out_wire_3_write),
      .ri_addr(cra_ring_node_ring_out_wire_3_addr),
      .ri_data(cra_ring_node_ring_out_wire_3_data),
      .ri_readdata(cra_ring_node_ring_out_wire_3_readdata),
      .ri_byteena(cra_ring_node_ring_out_wire_3_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_3_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_4_read),
      .ro_write(cra_ring_node_ring_out_wire_4_write),
      .ro_addr(cra_ring_node_ring_out_wire_4_addr),
      .ro_data(cra_ring_node_ring_out_wire_4_data),
      .ro_readdata(cra_ring_node_ring_out_wire_4_readdata),
      .ro_byteena(cra_ring_node_ring_out_wire_4_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_4_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

endmodule

